/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={325:()=>{!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),n.d(t,"OPCFooter",(function(){return ie}));const r="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,o=(e,t,n=null)=>{for(;t!==n;){const n=t.nextSibling;e.removeChild(t),t=n}},i=`{{lit-${String(Math.random()).slice(2)}}}`,a=`\x3c!--${i}--\x3e`,s=new RegExp(`${i}|${a}`);class l{constructor(e,t){this.parts=[],this.element=t;const n=[],r=[],o=document.createTreeWalker(t.content,133,null,!1);let a=0,l=-1,d=0;const{strings:A,values:{length:h}}=e;for(;d<h;){const e=o.nextNode();if(null!==e){if(l++,1===e.nodeType){if(e.hasAttributes()){const t=e.attributes,{length:n}=t;let r=0;for(let e=0;e<n;e++)c(t[e].name,"$lit$")&&r++;for(;r-- >0;){const t=A[d],n=m.exec(t)[2],r=n.toLowerCase()+"$lit$",o=e.getAttribute(r);e.removeAttribute(r);const i=o.split(s);this.parts.push({type:"attribute",index:l,name:n,strings:i}),d+=i.length-1}}"TEMPLATE"===e.tagName&&(r.push(e),o.currentNode=e.content)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(i)>=0){const r=e.parentNode,o=t.split(s),i=o.length-1;for(let t=0;t<i;t++){let n,i=o[t];if(""===i)n=p();else{const e=m.exec(i);null!==e&&c(e[2],"$lit$")&&(i=i.slice(0,e.index)+e[1]+e[2].slice(0,-"$lit$".length)+e[3]),n=document.createTextNode(i)}r.insertBefore(n,e),this.parts.push({type:"node",index:++l})}""===o[i]?(r.insertBefore(p(),e),n.push(e)):e.data=o[i],d+=i}}else if(8===e.nodeType)if(e.data===i){const t=e.parentNode;null!==e.previousSibling&&l!==a||(l++,t.insertBefore(p(),e)),a=l,this.parts.push({type:"node",index:l}),null===e.nextSibling?e.data="":(n.push(e),l--),d++}else{let t=-1;for(;-1!==(t=e.data.indexOf(i,t+1));)this.parts.push({type:"node",index:-1}),d++}}else o.currentNode=r.pop()}for(const e of n)e.parentNode.removeChild(e)}}const c=(e,t)=>{const n=e.length-t.length;return n>=0&&e.slice(n)===t},d=e=>-1!==e.index,p=()=>document.createComment(""),m=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;function A(e,t){const{element:{content:n},parts:r}=e,o=document.createTreeWalker(n,133,null,!1);let i=u(r),a=r[i],s=-1,l=0;const c=[];let d=null;for(;o.nextNode();){s++;const e=o.currentNode;for(e.previousSibling===d&&(d=null),t.has(e)&&(c.push(e),null===d&&(d=e)),null!==d&&l++;void 0!==a&&a.index===s;)a.index=null!==d?-1:a.index-l,i=u(r,i),a=r[i]}c.forEach((e=>e.parentNode.removeChild(e)))}const h=e=>{let t=11===e.nodeType?0:1;const n=document.createTreeWalker(e,133,null,!1);for(;n.nextNode();)t++;return t},u=(e,t=-1)=>{for(let n=t+1;n<e.length;n++){const t=e[n];if(d(t))return n}return-1},f=new WeakMap,C=e=>"function"==typeof e&&f.has(e),g={},y={};class B{constructor(e,t,n){this.__parts=[],this.template=e,this.processor=t,this.options=n}update(e){let t=0;for(const n of this.__parts)void 0!==n&&n.setValue(e[t]),t++;for(const e of this.__parts)void 0!==e&&e.commit()}_clone(){const e=r?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=[],n=this.template.parts,o=document.createTreeWalker(e,133,null,!1);let i,a=0,s=0,l=o.nextNode();for(;a<n.length;)if(i=n[a],d(i)){for(;s<i.index;)s++,"TEMPLATE"===l.nodeName&&(t.push(l),o.currentNode=l.content),null===(l=o.nextNode())&&(o.currentNode=t.pop(),l=o.nextNode());if("node"===i.type){const e=this.processor.handleTextExpression(this.options);e.insertAfterNode(l.previousSibling),this.__parts.push(e)}else this.__parts.push(...this.processor.handleAttributeExpressions(l,i.name,i.strings,this.options));a++}else this.__parts.push(void 0),a++;return r&&(document.adoptNode(e),customElements.upgrade(e)),e}}const b=window.trustedTypes&&trustedTypes.createPolicy("lit-html",{createHTML:e=>e}),_=` ${i} `;class v{constructor(e,t,n,r){this.strings=e,this.values=t,this.type=n,this.processor=r}getHTML(){const e=this.strings.length-1;let t="",n=!1;for(let r=0;r<e;r++){const e=this.strings[r],o=e.lastIndexOf("\x3c!--");n=(o>-1||n)&&-1===e.indexOf("--\x3e",o+1);const s=m.exec(e);t+=null===s?e+(n?_:a):e.substr(0,s.index)+s[1]+s[2]+"$lit$"+s[3]+i}return t+=this.strings[e],t}getTemplateElement(){const e=document.createElement("template");let t=this.getHTML();return void 0!==b&&(t=b.createHTML(t)),e.innerHTML=t,e}}const w=e=>null===e||!("object"==typeof e||"function"==typeof e),x=e=>Array.isArray(e)||!(!e||!e[Symbol.iterator]);class k{constructor(e,t,n){this.dirty=!0,this.element=e,this.name=t,this.strings=n,this.parts=[];for(let e=0;e<n.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new S(this)}_getValue(){const e=this.strings,t=e.length-1,n=this.parts;if(1===t&&""===e[0]&&""===e[1]){const e=n[0].value;if("symbol"==typeof e)return String(e);if("string"==typeof e||!x(e))return e}let r="";for(let o=0;o<t;o++){r+=e[o];const t=n[o];if(void 0!==t){const e=t.value;if(w(e)||!x(e))r+="string"==typeof e?e:String(e);else for(const t of e)r+="string"==typeof t?t:String(t)}}return r+=e[t],r}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class S{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===g||w(e)&&e===this.value||(this.value=e,C(e)||(this.committer.dirty=!0))}commit(){for(;C(this.value);){const e=this.value;this.value=g,e(this)}this.value!==g&&this.committer.commit()}}class E{constructor(e){this.value=void 0,this.__pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild(p()),this.endNode=e.appendChild(p())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e.__insert(this.startNode=p()),e.__insert(this.endNode=p())}insertAfterPart(e){e.__insert(this.startNode=p()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this.__pendingValue=e}commit(){if(null===this.startNode.parentNode)return;for(;C(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=g,e(this)}const e=this.__pendingValue;e!==g&&(w(e)?e!==this.value&&this.__commitText(e):e instanceof v?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):x(e)?this.__commitIterable(e):e===y?(this.value=y,this.clear()):this.__commitText(e))}__insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}__commitNode(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}__commitText(e){const t=this.startNode.nextSibling,n="string"==typeof(e=null==e?"":e)?e:String(e);t===this.endNode.previousSibling&&3===t.nodeType?t.data=n:this.__commitNode(document.createTextNode(n)),this.value=e}__commitTemplateResult(e){const t=this.options.templateFactory(e);if(this.value instanceof B&&this.value.template===t)this.value.update(e.values);else{const n=new B(t,e.processor,this.options),r=n._clone();n.update(e.values),this.__commitNode(r),this.value=n}}__commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let n,r=0;for(const o of e)n=t[r],void 0===n&&(n=new E(this.options),t.push(n),0===r?n.appendIntoPart(this):n.insertAfterPart(t[r-1])),n.setValue(o),n.commit(),r++;r<t.length&&(t.length=r,this.clear(n&&n.endNode))}clear(e=this.startNode){o(this.startNode.parentNode,e.nextSibling,this.endNode)}}class L{constructor(e,t,n){if(this.value=void 0,this.__pendingValue=void 0,2!==n.length||""!==n[0]||""!==n[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=n}setValue(e){this.__pendingValue=e}commit(){for(;C(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=g,e(this)}if(this.__pendingValue===g)return;const e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=g}}class M extends k{constructor(e,t,n){super(e,t,n),this.single=2===n.length&&""===n[0]&&""===n[1]}_createPart(){return new P(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class P extends S{}let T=!1;(()=>{try{const e={get capture(){return T=!0,!1}};window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){}})();class N{constructor(e,t,n){this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=t,this.eventContext=n,this.__boundHandleEvent=e=>this.handleEvent(e)}setValue(e){this.__pendingValue=e}commit(){for(;C(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=g,e(this)}if(this.__pendingValue===g)return;const e=this.__pendingValue,t=this.value,n=null==e||null!=t&&(e.capture!==t.capture||e.once!==t.once||e.passive!==t.passive),r=null!=e&&(null==t||n);n&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),r&&(this.__options=O(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=g}handleEvent(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}const O=e=>e&&(T?{capture:e.capture,passive:e.passive,once:e.once}:e.capture);function j(e){let t=q.get(e.type);void 0===t&&(t={stringsArray:new WeakMap,keyString:new Map},q.set(e.type,t));let n=t.stringsArray.get(e.strings);if(void 0!==n)return n;const r=e.strings.join(i);return n=t.keyString.get(r),void 0===n&&(n=new l(e,e.getTemplateElement()),t.keyString.set(r,n)),t.stringsArray.set(e.strings,n),n}const q=new Map,F=new WeakMap,D=new class{handleAttributeExpressions(e,t,n,r){const o=t[0];return"."===o?new M(e,t.slice(1),n).parts:"@"===o?[new N(e,t.slice(1),r.eventContext)]:"?"===o?[new L(e,t.slice(1),n)]:new k(e,t,n).parts}handleTextExpression(e){return new E(e)}};"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.3.0");const Z=(e,...t)=>new v(e,t,"html",D),z=(e,t)=>`${e}--${t}`;let R=!0;void 0===window.ShadyCSS?R=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),R=!1);const U=e=>t=>{const n=z(t.type,e);let r=q.get(n);void 0===r&&(r={stringsArray:new WeakMap,keyString:new Map},q.set(n,r));let o=r.stringsArray.get(t.strings);if(void 0!==o)return o;const a=t.strings.join(i);if(o=r.keyString.get(a),void 0===o){const n=t.getTemplateElement();R&&window.ShadyCSS.prepareTemplateDom(n,e),o=new l(t,n),r.keyString.set(a,o)}return r.stringsArray.set(t.strings,o),o},H=["html","svg"],Y=new Set;window.JSCompiler_renameProperty=(e,t)=>e;const I={toAttribute(e,t){switch(t){case Boolean:return e?"":null;case Object:case Array:return null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){switch(t){case Boolean:return null!==e;case Number:return null===e?null:Number(e);case Object:case Array:return JSON.parse(e)}return e}},G=(e,t)=>t!==e&&(t==t||e==e),V={attribute:!0,type:String,converter:I,reflect:!1,hasChanged:G};class $ extends HTMLElement{constructor(){super(),this.initialize()}static get observedAttributes(){this.finalize();const e=[];return this._classProperties.forEach(((t,n)=>{const r=this._attributeNameForProperty(n,t);void 0!==r&&(this._attributeToPropertyMap.set(r,n),e.push(r))})),e}static _ensureClassProperties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;const e=Object.getPrototypeOf(this)._classProperties;void 0!==e&&e.forEach(((e,t)=>this._classProperties.set(t,e)))}}static createProperty(e,t=V){if(this._ensureClassProperties(),this._classProperties.set(e,t),t.noAccessor||this.prototype.hasOwnProperty(e))return;const n="symbol"==typeof e?Symbol():"__"+e,r=this.getPropertyDescriptor(e,n,t);void 0!==r&&Object.defineProperty(this.prototype,e,r)}static getPropertyDescriptor(e,t,n){return{get(){return this[t]},set(r){const o=this[e];this[t]=r,this.requestUpdateInternal(e,o,n)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this._classProperties&&this._classProperties.get(e)||V}static finalize(){const e=Object.getPrototypeOf(this);if(e.hasOwnProperty("finalized")||e.finalize(),this.finalized=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const e=this.properties,t=[...Object.getOwnPropertyNames(e),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e):[]];for(const n of t)this.createProperty(n,e[n])}}static _attributeNameForProperty(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}static _valueHasChanged(e,t,n=G){return n(e,t)}static _propertyValueFromAttribute(e,t){const n=t.type,r=t.converter||I,o="function"==typeof r?r:r.fromAttribute;return o?o(e,n):e}static _propertyValueToAttribute(e,t){if(void 0===t.reflect)return;const n=t.type,r=t.converter;return(r&&r.toAttribute||I.toAttribute)(e,n)}initialize(){this._updateState=0,this._updatePromise=new Promise((e=>this._enableUpdatingResolver=e)),this._changedProperties=new Map,this._saveInstanceProperties(),this.requestUpdateInternal()}_saveInstanceProperties(){this.constructor._classProperties.forEach(((e,t)=>{if(this.hasOwnProperty(t)){const e=this[t];delete this[t],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(t,e)}}))}_applyInstanceProperties(){this._instanceProperties.forEach(((e,t)=>this[t]=e)),this._instanceProperties=void 0}connectedCallback(){this.enableUpdating()}enableUpdating(){void 0!==this._enableUpdatingResolver&&(this._enableUpdatingResolver(),this._enableUpdatingResolver=void 0)}disconnectedCallback(){}attributeChangedCallback(e,t,n){t!==n&&this._attributeToProperty(e,n)}_propertyToAttribute(e,t,n=V){const r=this.constructor,o=r._attributeNameForProperty(e,n);if(void 0!==o){const e=r._propertyValueToAttribute(t,n);if(void 0===e)return;this._updateState=8|this._updateState,null==e?this.removeAttribute(o):this.setAttribute(o,e),this._updateState=-9&this._updateState}}_attributeToProperty(e,t){if(8&this._updateState)return;const n=this.constructor,r=n._attributeToPropertyMap.get(e);if(void 0!==r){const e=n.getPropertyOptions(r);this._updateState=16|this._updateState,this[r]=n._propertyValueFromAttribute(t,e),this._updateState=-17&this._updateState}}requestUpdateInternal(e,t,n){let r=!0;if(void 0!==e){const o=this.constructor;n=n||o.getPropertyOptions(e),o._valueHasChanged(this[e],t,n.hasChanged)?(this._changedProperties.has(e)||this._changedProperties.set(e,t),!0!==n.reflect||16&this._updateState||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(e,n))):r=!1}!this._hasRequestedUpdate&&r&&(this._updatePromise=this._enqueueUpdate())}requestUpdate(e,t){return this.requestUpdateInternal(e,t),this.updateComplete}async _enqueueUpdate(){this._updateState=4|this._updateState;try{await this._updatePromise}catch(e){}const e=this.performUpdate();return null!=e&&await e,!this._hasRequestedUpdate}get _hasRequestedUpdate(){return 4&this._updateState}get hasUpdated(){return 1&this._updateState}performUpdate(){if(!this._hasRequestedUpdate)return;this._instanceProperties&&this._applyInstanceProperties();let e=!1;const t=this._changedProperties;try{e=this.shouldUpdate(t),e?this.update(t):this._markUpdated()}catch(t){throw e=!1,this._markUpdated(),t}e&&(1&this._updateState||(this._updateState=1|this._updateState,this.firstUpdated(t)),this.updated(t))}_markUpdated(){this._changedProperties=new Map,this._updateState=-5&this._updateState}get updateComplete(){return this._getUpdateComplete()}_getUpdateComplete(){return this._updatePromise}shouldUpdate(e){return!0}update(e){void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach(((e,t)=>this._propertyToAttribute(t,this[t],e))),this._reflectingProperties=void 0),this._markUpdated()}updated(e){}firstUpdated(e){}}$.finalized=!0;const W=(e,t)=>"method"===t.kind&&t.descriptor&&!("value"in t.descriptor)?Object.assign(Object.assign({},t),{finisher(n){n.createProperty(t.key,e)}}):{kind:"field",key:Symbol(),placement:"own",descriptor:{},initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(n){n.createProperty(t.key,e)}};function J(e){return(t,n)=>void 0!==n?((e,t,n)=>{t.constructor.createProperty(n,e)})(e,t,n):W(e,t)}const K=Element.prototype;K.msMatchesSelector||K.webkitMatchesSelector;const Q=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,X=Symbol();class ee{constructor(e,t){if(t!==X)throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e}get styleSheet(){return void 0===this._styleSheet&&(Q?(this._styleSheet=new CSSStyleSheet,this._styleSheet.replaceSync(this.cssText)):this._styleSheet=null),this._styleSheet}toString(){return this.cssText}}(window.litElementVersions||(window.litElementVersions=[])).push("2.4.0");const te={};class ne extends ${static getStyles(){return this.styles}static _getUniqueStyles(){if(this.hasOwnProperty(JSCompiler_renameProperty("_styles",this)))return;const e=this.getStyles();if(Array.isArray(e)){const t=(e,n)=>e.reduceRight(((e,n)=>Array.isArray(n)?t(n,e):(e.add(n),e)),n),n=t(e,new Set),r=[];n.forEach((e=>r.unshift(e))),this._styles=r}else this._styles=void 0===e?[]:[e];this._styles=this._styles.map((e=>{if(e instanceof CSSStyleSheet&&!Q){const t=Array.prototype.slice.call(e.cssRules).reduce(((e,t)=>e+t.cssText),"");return new ee(String(t),X)}return e}))}initialize(){super.initialize(),this.constructor._getUniqueStyles(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const e=this.constructor._styles;0!==e.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?Q?this.renderRoot.adoptedStyleSheets=e.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet)):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(e.map((e=>e.cssText)),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(e){const t=this.render();super.update(e),t!==te&&this.constructor.render(t,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach((e=>{const t=document.createElement("style");t.textContent=e.cssText,this.renderRoot.appendChild(t)})))}render(){return te}}ne.finalized=!0,ne.render=(e,t,n)=>{if(!n||"object"!=typeof n||!n.scopeName)throw new Error("The `scopeName` option is required.");const r=n.scopeName,i=F.has(t),a=R&&11===t.nodeType&&!!t.host,s=a&&!Y.has(r),l=s?document.createDocumentFragment():t;if(((e,t,n)=>{let r=F.get(t);void 0===r&&(o(t,t.firstChild),F.set(t,r=new E(Object.assign({templateFactory:j},n))),r.appendInto(t)),r.setValue(e),r.commit()})(e,l,Object.assign({templateFactory:U(r)},n)),s){const e=F.get(l);F.delete(l);((e,t,n)=>{Y.add(e);const r=n?n.element:document.createElement("template"),o=t.querySelectorAll("style"),{length:i}=o;if(0===i)return void window.ShadyCSS.prepareTemplateStyles(r,e);const a=document.createElement("style");for(let e=0;e<i;e++){const t=o[e];t.parentNode.removeChild(t),a.textContent+=t.textContent}(e=>{H.forEach((t=>{const n=q.get(z(t,e));void 0!==n&&n.keyString.forEach((e=>{const{element:{content:t}}=e,n=new Set;Array.from(t.querySelectorAll("style")).forEach((e=>{n.add(e)})),A(e,n)}))}))})(e);const s=r.content;n?function(e,t,n=null){const{element:{content:r},parts:o}=e;if(null==n)return void r.appendChild(t);const i=document.createTreeWalker(r,133,null,!1);let a=u(o),s=0,l=-1;for(;i.nextNode();)for(l++,i.currentNode===n&&(s=h(t),n.parentNode.insertBefore(t,n));-1!==a&&o[a].index===l;){if(s>0){for(;-1!==a;)o[a].index+=s,a=u(o,a);return}a=u(o,a)}}(n,a,s.firstChild):s.insertBefore(a,s.firstChild),window.ShadyCSS.prepareTemplateStyles(r,e);const l=s.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==l)t.insertBefore(l.cloneNode(!0),t.firstChild);else if(n){s.insertBefore(a,s.firstChild);const e=new Set;e.add(a),A(n,e)}})(r,l,e.value instanceof B?e.value.template:void 0),o(t,t.firstChild),t.appendChild(l),F.set(t,e)}!i&&a&&window.ShadyCSS.styleElement(t.host)};var re=((e,...t)=>{const n=t.reduce(((t,n,r)=>t+(e=>{if(e instanceof ee)return e.cssText;if("number"==typeof e)return e;throw new Error(`Value passed to 'css' function must be a 'css' function result: ${e}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`)})(n)+e[r+1]),e[0]);return new ee(n,X)})`:root{--opc-global--Heading--Font-Family:'Red Hat Display',Overpass 'Arial';--opc-global--Font-Family:'Red Hat Text',Overpass,'Arial'}*,::after,::before{box-sizing:border-box;font-family:var(--opc-global--Font-Family, "Red Hat Text")}blockquote,body,dd,dl,dt,fieldset,figure,h1,h2,h3,h4,h5,h6,hr,html,iframe,legend,li,ol,p,pre,textarea,ul{padding:0;margin-top:0}blockquote:last-child,body:last-child,dd:last-child,dl:last-child,dt:last-child,fieldset:last-child,figure:last-child,h1:last-child,h2:last-child,h3:last-child,h4:last-child,h5:last-child,h6:last-child,hr:last-child,html:last-child,iframe:last-child,legend:last-child,li:last-child,ol:last-child,p:last-child,pre:last-child,textarea:last-child,ul:last-child{margin-bottom:0}h1,h2,h3,h4,h5,h6{font-family:var(--opc-global--Heading--font-Family, "Red Hat Display")}ul{list-style:none}button,input,select,textarea{margin:0}audio,embed,iframe,img,object,video{max-width:100%;height:auto}iframe{border:0}table{border-spacing:0;border-collapse:collapse}td,th{padding:0;text-align:left}:host{display:block}footer{display:flex;flex-wrap:wrap;flex-direction:row;justify-content:center;padding:var(--opc-footer--Padding,20px)}footer .link-category{margin-left:var(--opc-footer__link-category--MarginLeft,8px);margin-right:var(--opc-footer__link-category--MarginRight,8px);margin-bottom:var(--opc-footer__link-category--MarginBottom,32px);min-width:var(--opc-footer__link-category--MinWidth,280px);flex-shrink:1;display:flex;flex-direction:column}footer .link-category-container{width:100%;display:flex;justify-content:center;align-items:center;flex-wrap:wrap;flex-direction:row}footer .link-category__name{font-family:var(--opc-global--Heading--font-Family, "Red Hat Display");font-size:1.25rem;font-weight:400;margin-bottom:var(--opc-footer--MarginBottom,1rem);text-transform:uppercase}footer a{text-decoration:none;margin-bottom:8px;cursor:pointer}footer a:hover{text-decoration:underline}.light{border:1px solid #d2d2d2;color:var(--opc-footer--TextColor,#000);background:var(--opc-footer--BackgroundColor,#fff)}.light a{color:var(--opc-theme--color--text,#151515)}:host([theme=dark]){color:var(--opc-footer--TextColor,#fff);background:var(--opc-footer--BackgroundColor,#000)}.dark a{color:var(--opc-theme--color--text--on-dark,#fafafa)}.dark.background-image-dark,.light.background-image-light{background-image:url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='182.711' height='226.942' viewBox='0 0 182.711 226.942'%3E%3Cg transform='translate(0)' opacity='0.25'%3E%3Cg transform='translate(0)'%3E%3Cpath d='M164.185,42.31l.076,45.357-39.107-22.5L125.112,20.9Z' transform='translate(-85.631 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M179.466,87.047l.09-44.775L218.919,20.9l.043,44.263Z' transform='translate(-179.438 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M203.742,104.926l-39.107-22.5-39.524,21.9,39.481,23.3Z' transform='translate(-125.112 -36.792)' fill='%23f3f3f3' opacity='0.803'/%3E%3Cpath d='M163,51.166,126.422,72.208l-.223,44.547,36.846-21.326L163,52.626Zm1.185-.55.047,45.495L125,118.812l.237-47.3,36.548-20.894Z' transform='translate(-85.519 -27.869)' fill='%23fff'/%3E%3Cpath d='M164.428,20.37,127.464,41.724l37.159,20.951L201.232,41.71l-36.8-21.326Zm0-1.355,39.182,22.7-38.983,22.3L125.066,41.747,164.428,19Z' transform='translate(-124.947 -19)' fill='%23fff'/%3E%3C/g%3E%3Cg transform='translate(52 45)'%3E%3Cpath d='M164.185,42.31l.076,45.357-39.107-22.5L125.112,20.9Z' transform='translate(-85.631 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M179.466,87.047l.09-44.775L218.919,20.9l.043,44.263Z' transform='translate(-179.438 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M203.742,104.926l-39.107-22.5-39.524,21.9,39.481,23.3Z' transform='translate(-125.112 -36.792)' fill='%23f3f3f3' opacity='0.803'/%3E%3Cpath d='M163,51.166,126.422,72.208l-.223,44.547,36.846-21.326L163,52.626Zm1.185-.55.047,45.495L125,118.812l.237-47.3,36.548-20.894Z' transform='translate(-85.519 -27.869)' fill='%23fff'/%3E%3Cpath d='M164.428,20.37,127.464,41.724l37.159,20.951L201.232,41.71l-36.8-21.326Zm0-1.355,39.182,22.7-38.983,22.3L125.066,41.747,164.428,19Z' transform='translate(-124.947 -19)' fill='%23fff'/%3E%3C/g%3E%3Cg transform='translate(0 90)'%3E%3Cpath d='M164.185,42.31l.076,45.357-39.107-22.5L125.112,20.9Z' transform='translate(-85.631 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M179.466,87.047l.09-44.775L218.919,20.9l.043,44.263Z' transform='translate(-179.438 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M203.742,104.926l-39.107-22.5-39.524,21.9,39.481,23.3Z' transform='translate(-125.112 -36.792)' fill='%23f3f3f3' opacity='0.803'/%3E%3Cpath d='M163,51.166,126.422,72.208l-.223,44.547,36.846-21.326L163,52.626Zm1.185-.55.047,45.495L125,118.812l.237-47.3,36.548-20.894Z' transform='translate(-85.519 -27.869)' fill='%23fff'/%3E%3Cpath d='M164.428,20.37,127.464,41.724l37.159,20.951L201.232,41.71l-36.8-21.326Zm0-1.355,39.182,22.7-38.983,22.3L125.066,41.747,164.428,19Z' transform='translate(-124.947 -19)' fill='%23fff'/%3E%3C/g%3E%3Cg transform='translate(104 91)'%3E%3Cpath d='M164.185,42.31l.076,45.357-39.107-22.5L125.112,20.9Z' transform='translate(-85.631 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M179.466,87.047l.09-44.775L218.919,20.9l.043,44.263Z' transform='translate(-179.438 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M203.742,104.926l-39.107-22.5-39.524,21.9,39.481,23.3Z' transform='translate(-125.112 -36.792)' fill='%23f3f3f3' opacity='0.803'/%3E%3Cpath d='M163,51.166,126.422,72.208l-.223,44.547,36.846-21.326L163,52.626Zm1.185-.55.047,45.495L125,118.812l.237-47.3,36.548-20.894Z' transform='translate(-85.519 -27.869)' fill='%23fff'/%3E%3Cpath d='M164.428,20.37,127.464,41.724l37.159,20.951L201.232,41.71l-36.8-21.326Zm0-1.355,39.182,22.7-38.983,22.3L125.066,41.747,164.428,19Z' transform='translate(-124.947 -19)' fill='%23fff'/%3E%3C/g%3E%3Cg transform='translate(52 136)'%3E%3Cpath d='M164.185,42.31l.076,45.357-39.107-22.5L125.112,20.9Z' transform='translate(-85.631 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M179.466,87.047l.09-44.775L218.919,20.9l.043,44.263Z' transform='translate(-179.438 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M203.742,104.926l-39.107-22.5-39.524,21.9,39.481,23.3Z' transform='translate(-125.112 -36.792)' fill='%23f3f3f3' opacity='0.803'/%3E%3Cpath d='M163,51.166,126.422,72.208l-.223,44.547,36.846-21.326L163,52.626Zm1.185-.55.047,45.495L125,118.812l.237-47.3,36.548-20.894Z' transform='translate(-85.519 -27.869)' fill='%23fff'/%3E%3Cpath d='M164.428,20.37,127.464,41.724l37.159,20.951L201.232,41.71l-36.8-21.326Zm0-1.355,39.182,22.7-38.983,22.3L125.066,41.747,164.428,19Z' transform='translate(-124.947 -19)' fill='%23fff'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E"),url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='182.711' height='219' viewBox='0 0 182.711 219'%3E%3Cg transform='translate(-11984 -12222.028)' opacity='0.25'%3E%3Cg transform='translate(12088 12222.028)'%3E%3Cpath d='M125.188,42.31l-.076,45.357,39.107-22.5.043-44.263Z' transform='translate(-125.031 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M218.962,87.047l-.09-44.775L179.509,20.9l-.043,44.263Z' transform='translate(-140.279 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M125.112,104.926l39.107-22.5,39.524,21.9-39.481,23.3Z' transform='translate(-125.031 -36.792)' fill='%23f3f3f3' opacity='0.803'/%3E%3Cpath d='M126.232,51.166l36.576,21.041.223,44.547L126.185,95.429l.047-42.8Zm-1.185-.55L125,96.112l39.23,22.7-.237-47.3L127.445,50.617Z' transform='translate(-125 -27.869)' fill='%23fff'/%3E%3Cpath d='M164.248,20.37l36.965,21.354L164.054,62.675,127.445,41.71l36.8-21.326Zm0-1.355-39.182,22.7,38.983,22.3,39.562-22.274L164.248,19Z' transform='translate(-125.018 -19)' fill='%23fff'/%3E%3C/g%3E%3Cg transform='translate(12036 12264.4)'%3E%3Cpath d='M125.188,42.31l-.076,45.357,39.107-22.5.043-44.263Z' transform='translate(-125.031 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M218.962,87.047l-.09-44.775L179.509,20.9l-.043,44.263Z' transform='translate(-140.279 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M125.112,104.926l39.107-22.5,39.524,21.9-39.481,23.3Z' transform='translate(-125.031 -36.792)' fill='%23f3f3f3' opacity='0.803'/%3E%3Cpath d='M126.232,51.166l36.576,21.041.223,44.547L126.185,95.429l.047-42.8Zm-1.185-.55L125,96.112l39.23,22.7-.237-47.3L127.445,50.617Z' transform='translate(-125 -27.869)' fill='%23fff'/%3E%3Cpath d='M164.248,20.37l36.965,21.354L164.054,62.675,127.445,41.71l36.8-21.326Zm0-1.355-39.182,22.7,38.983,22.3,39.562-22.274L164.248,19Z' transform='translate(-125.018 -19)' fill='%23fff'/%3E%3C/g%3E%3Cg transform='translate(12088 12306.772)'%3E%3Cpath d='M125.188,42.31l-.076,45.357,39.107-22.5.043-44.263Z' transform='translate(-125.031 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M218.962,87.047l-.09-44.775L179.509,20.9l-.043,44.263Z' transform='translate(-140.279 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M125.112,104.926l39.107-22.5,39.524,21.9-39.481,23.3Z' transform='translate(-125.031 -36.792)' fill='%23f3f3f3' opacity='0.803'/%3E%3Cpath d='M126.232,51.166l36.576,21.041.223,44.547L126.185,95.429l.047-42.8Zm-1.185-.55L125,96.112l39.23,22.7-.237-47.3L127.445,50.617Z' transform='translate(-125 -27.869)' fill='%23fff'/%3E%3Cpath d='M164.248,20.37l36.965,21.354L164.054,62.675,127.445,41.71l36.8-21.326Zm0-1.355-39.182,22.7,38.983,22.3,39.562-22.274L164.248,19Z' transform='translate(-125.018 -19)' fill='%23fff'/%3E%3C/g%3E%3Cg transform='translate(11984 12307.714)'%3E%3Cpath d='M125.188,42.31l-.076,45.357,39.107-22.5.043-44.263Z' transform='translate(-125.031 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M218.962,87.047l-.09-44.775L179.509,20.9l-.043,44.263Z' transform='translate(-140.279 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M125.112,104.926l39.107-22.5,39.524,21.9-39.481,23.3Z' transform='translate(-125.031 -36.792)' fill='%23f3f3f3' opacity='0.803'/%3E%3Cpath d='M126.232,51.166l36.576,21.041.223,44.547L126.185,95.429l.047-42.8Zm-1.185-.55L125,96.112l39.23,22.7-.237-47.3L127.445,50.617Z' transform='translate(-125 -27.869)' fill='%23fff'/%3E%3Cpath d='M164.248,20.37l36.965,21.354L164.054,62.675,127.445,41.71l36.8-21.326Zm0-1.355-39.182,22.7,38.983,22.3,39.562-22.274L164.248,19Z' transform='translate(-125.018 -19)' fill='%23fff'/%3E%3C/g%3E%3Cg transform='translate(12036 12350.086)'%3E%3Cpath d='M125.188,42.31l-.076,45.357,39.107-22.5.043-44.263Z' transform='translate(-125.031 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M218.962,87.047l-.09-44.775L179.509,20.9l-.043,44.263Z' transform='translate(-140.279 -19.534)' fill='%23ddd' opacity='0.8'/%3E%3Cpath d='M125.112,104.926l39.107-22.5,39.524,21.9-39.481,23.3Z' transform='translate(-125.031 -36.792)' fill='%23f3f3f3' opacity='0.803'/%3E%3Cpath d='M126.232,51.166l36.576,21.041.223,44.547L126.185,95.429l.047-42.8Zm-1.185-.55L125,96.112l39.23,22.7-.237-47.3L127.445,50.617Z' transform='translate(-125 -27.869)' fill='%23fff'/%3E%3Cpath d='M164.248,20.37l36.965,21.354L164.054,62.675,127.445,41.71l36.8-21.326Zm0-1.355-39.182,22.7,38.983,22.3,39.562-22.274L164.248,19Z' transform='translate(-125.018 -19)' fill='%23fff'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");background-repeat:no-repeat;background-position:-38px center,calc(100% + 38px) center}.light.background-image-light{background-blend-mode:exclusion}.note{flex:1 0 100%;text-align:center;font-size:var(--opc-footer__Note--FontSize,14px)}`,oe=function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a};let ie=class extends ne{constructor(){super(...arguments),this.theme="light",this._linkCategories=[]}static get styles(){return[re]}get opcLinkCategories(){return this._linkCategories}set opcLinkCategories(e){e.length?this._linkCategories=e:console.warn(`\n        ${this.tagName.toLowerCase()}:\n        opc-footer needs an array of OPCFooterLinkCategory[] type for more information\n        read README.md file.`)}render(){return Z`
      <footer class="${"light"===this.theme?"light":"dark"}
        ${this._linkCategories.length?"background-image-"+this.theme:""}">
        ${this._linkCategories.map((e=>Z`
          <div class="link-category">
            <h4 class="link-category__name">${e.category}</h4>
            ${e.links.map((e=>Z`
              ${e.href?Z`<a href="${e.href}"
                  target="_blank"
                  name="${e.text}">${e.text}</a>`:Z`<a name="${e.text}" tabindex="0"
                  @click="${t=>this._footerLinkClicked(e)}">${e.text}</a>`}
            `))}
          </div>
        `))}
      </div>

      <div class="note">
        Copyright &copy; ${(new Date).getFullYear()}
        <slot name="copyright">All Rights Reserved.</slot>
      </div>
      </footer>
    `}_footerLinkClicked(e){let t=new CustomEvent("opc-footer-link:click",{detail:{message:"opc-footer-link clicked.",data:e},bubbles:!0,composed:!0});this.dispatchEvent(t)}};oe([J({attribute:"theme"})],ie.prototype,"theme",void 0),oe([J({type:Array,attribute:"link-categories"})],ie.prototype,"_linkCategories",void 0),ie=oe([("opc-footer",e=>"function"==typeof e?((e,t)=>(window.customElements.define("opc-footer",t),t))(0,e):((e,t)=>{const{kind:n,elements:r}=t;return{kind:n,elements:r,finisher(e){window.customElements.define("opc-footer",e)}}})(0,e))],ie)}])},749:(e,t,n)=>{"use strict";var r=n(379),o=n.n(r),i=n(800),a={insert:"head",singleton:!1};o()(i.Z,a);i.Z.locals;n(325);const s=JSON.parse('[{"category":"Quick Links","links":[{"text":"One Platform on The Source","href":"https://source.redhat.com/groups/public/pnt-devops/oneportal"},{"text":"One Platform Blog","href":"/get-started/blog/"},{"text":"Contact Us","href":"/contact-us"}]},{"category":"Related sites","links":[{"text":"access.redhat.com","href":"https://access.redhat.com/"},{"text":"catalog.redhat.com","href":"https://catalog.redhat.com/"},{"text":"connect.redhat.com","href":"https://connect.redhat.com/"}]},{"category":"Help","links":[{"text":"Report An Issue"},{"text":"One Platform FAQs","href":"https://source.redhat.com/groups/public/pnt-devops/oneportal/one_portal_wiki/faqs_one_platform"},{"text":"one-portal@redhat.com","href":"mailto:one-portal@redhat.com"},{"text":"GitHub","href":"https://github.com/1-platform/one-platform"}]}]');function l(e){if(!e.ok)throw Error(e.statusText);return e}function c(e){var t,n={method:"post",headers:{Authorization:"Bearer ".concat(null===(t=window.OpAuthHelper)||void 0===t?void 0:t.jwtToken),"Content-Type":"application/json"},body:JSON.stringify({query:e})};return fetch("https://api.qa.one.redhat.com/graphql",n).then(l).then((function(e){return e.json()})).catch((function(e){console.error(e)}))}const d=JSON.parse('[{"name":"Authentication","description":"Adding authentication to your application is pice of cake. Just integrate with our API and focus on application development.","link":"/get-started/docs/microservices/authorization/","icon":"res/img/auth.svg","imgBgColor":"#F3FAF2"},{"name":"Feedback","description":"Allows users to review and rate services and products provided by teams. Built into a power packed microservice so serve all.","link":"/get-started/docs/microservices/feedback-service/","icon":"res/img/feedback.svg","imgBgColor":"#FAEAE8"},{"name":"Notification","description":"Notification framework for One Platform and also all other SPAs","link":"/get-started/docs/microservices/notifications-service/","icon":"res/img/notification.svg","imgBgColor":"#E7F1FA"},{"name":"User Group","description":"A prebuilt integration with LDAP to authenticate, authorize and get user information.","link":"/get-started/docs/microservices/user-groups-service/","icon":"res/img/user.svg","imgBgColor":"#FDF7E7"},{"name":"Search","description":"A unified search API gives you ability to search across all hosted applications on the platform.","link":"/get-started/docs/microservices/search-service/","icon":"res/img/search.svg","imgBgColor":"#F2F9F9"}]');function p(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return m(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return m(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return a=e.done,e},e:function(e){s=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw i}}}}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var A=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"BUILTIN",n=document.querySelector("#applications-cards");null!==n&&(n.innerHTML=e.filter((function(e){return e.applicationType===t})).slice(0,12).map((function(e){var t=""===e.icon||null===e.icon?"../res/img/redcube.svg":e.icon,n=""===e.icon||null===e.icon?"":'style="filter:invert(21%) sepia(54%) saturate(5781%) hue-rotate(322deg) brightness(74%) contrast(126%)"';return'\n        <a \n          target="_blank" \n          '.concat(e.isActive?'href="'+e.path+'"':"",' \n          style="').concat(e.isActive?"":"cursor: no-drop",'" \n          class="section__applications-card">\n          <div class="section__applications-card-image">\n            <img src="').concat(e.isActive?t:"../res/img/cube.svg",'" ').concat(n,' alt="cube">\n          </div>\n          <div class="section__applications-card-label">\n            <label>').concat(e.name.length>20?e.name.slice(0,20)+"...":e.name,'</label>\n            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" \n            viewBox="0 0 12 12"><g transform="translate(0.5 0.5)">\n            <path d="M11,6.5V9a2.006,2.006,0,0,1-2,2H2A2.006,2.006,0,0,1,0,9V2A2.006,2.006,0,0,1,2,0H4.5" fill="none" \n            stroke="#4d4d4d" stroke-miterlimit="10" stroke-width="1"/><line x1="5.5" y2="5.5" \n            transform="translate(5.5)" fill="none" stroke="#4d4d4d" \n            stroke-miterlimit="10" stroke-width="1"/><path d="M6.5,0H11V4.5" fill="none" \n            stroke="#4d4d4d" stroke-miterlimit="10" stroke-width="1"/></g></svg>\n          </div>\n        </a>')})).join(""))};window.selectSideNav=function(e){var t=document.querySelector("#sidebar-links").querySelectorAll("li");null!==t&&t.forEach((function(e){return e.classList.remove("pf-m-current")})),e.classList.add("pf-m-current")},window.selectTab=function(e){var t=document.querySelector("#app-tabs").querySelectorAll("li");if(null!==t){var n,r=p(t);try{for(r.s();!(n=r.n()).done;){n.value.classList.remove("pf-m-current")}}catch(e){r.e(e)}finally{r.f()}}e.classList.add("pf-m-current"),A(JSON.parse(localStorage.getItem("spaList")),e.attributes.value.value)},window.openAppDrawer=function(){try{document.querySelector("body > op-nav").toggleDrawer("app")}catch(e){return e}},window.toggleDeployModal=function(e){document.querySelector("#deploy-spa-modal").style.display=e,document.querySelector("body").style.overflow="block"===e?"hidden":"visible",document.querySelector("#deploy-form").reset()},window.onload=function(){var e=document.querySelector("#sidebar-links").querySelectorAll("li");document.querySelectorAll("#section-main > div").forEach((function(t,n){new IntersectionObserver((function(t){t[0].isIntersecting&&(e.forEach((function(e){return e.classList.remove("pf-m-current")})),e[n].classList.add("pf-m-current"))}),{rootMargin:"-50% 0px"}).observe(t)}))};var h=JSON.parse(localStorage.getItem("spaList"));document.addEventListener("DOMContentLoaded",(function(){document.querySelector("#deploy-form").addEventListener("change",validate)})),window.validate=function(){var e=document.querySelector("#deploy-submit"),t=checkAppName()&&checkAppPath();return e.disabled=!t,t},window.checkAppName=function(){var e=document.querySelector("#app-name"),t=h.map((function(e){return e.name.toLowerCase()})),n=document.querySelector("#app-name-helper"),r=e.value.toLowerCase().trim();return t.includes(r)||""===r?(n.innerHTML=n.classList.remove("pf-m-success"),n.classList.add("pf-m-error"),n.innerHTML="SPA name invalid or already in use.",e.classList.remove("pf-m-success"),e.setAttribute("aria-invalid","true"),!1):(n.classList.remove("pf-m-error"),n.classList.add("pf-m-success"),n.innerHTML="SPA name available.",e.classList.add("pf-m-success"),e.setAttribute("aria-invalid","false"),!0)},window.checkAppPath=function(){var e=document.querySelector("#app-path"),t=h.map((function(e){return e.path.toLowerCase()})),n=document.querySelector("#app-path-helper"),r=e.value;return!t.includes(r)&&/^\/[-a-z]+$/.test(r)?(n.classList.remove("pf-m-error"),n.classList.add("pf-m-success"),n.innerHTML="Path available.",e.classList.add("pf-m-success"),e.setAttribute("aria-invalid","false"),!0):(n.innerHTML=n.classList.remove("pf-m-success"),n.classList.add("pf-m-error"),n.innerHTML="App path url invalid or already in use, please check the guide.",e.classList.remove("pf-m-success"),e.setAttribute("aria-invalid","true"),!1)},window.submitForm=function(){if(validate()){var e={name:document.querySelector("#app-name").value,path:document.querySelector("#app-path").value,description:document.querySelector("#app-description").value,upload:document.querySelector("#app-file").files[0],ref:document.querySelector("#app-ref").value},t=new FormData;Object.keys(e).forEach((function(n){return t.append(n,e[n])})),document.querySelector("#deploy-submit").innerHTML=' \n  <span class="pf-c-spinner pf-m-md" style="--pf-c-spinner--Color: #C9190B;" role="progressbar" aria-valuetext="Loading...">\n    <span class="pf-c-spinner__clipper"></span>\n    <span class="pf-c-spinner__lead-ball"></span>\n    <span class="pf-c-spinner__tail-ball"></span>\n  </span>\n  Deploying Now',document.querySelector("#deploy-submit").disabled=!0,function(e){var t,n={method:"post",headers:{Authorization:"Bearer ".concat(null===(t=window.OpAuthHelper)||void 0===t?void 0:t.jwtToken),"Content-Type":"application/json"},body:JSON.stringify({query:"mutation QuickDeploy($app: CreateAppInput!){ createApp(app: $app) { id name path } }",variables:{app:{name:e.name,path:e.path,description:e.description,isActive:!0,applicationType:"HOSTED"}}})};return fetch("https://api.qa.one.redhat.com/graphql",n).then(l).then((function(e){return e.json()}))}(e).then((function(){(function(e){var t={method:"post",headers:{Authorization:"apikey ".concat({}.SPASHIP_API_KEY)},body:e};return fetch({}.SPASHIP_API_URL,t).then(l).then((function(e){return e.json()}))})(t).then((function(e){window.OpNotification.success({subject:"App Deployed Successfully",body:"You will be redirected to the dev console page shortly",link:e.data.path}),setTimeout((function(){return window.location.href="/console/".concat(e.data.path)}),3e3)}))})).catch((function(e){console.error(e),window.OpNotification.danger({subject:"There was an error deploying the app, please try again from the Developer Console",body:"err"}),setTimeout((function(){return window.location.href="/console"}),3e3),toggleDeployModal("none")}))}};var u=document.querySelector("footer");null!==u&&(u.innerHTML='\n  <opc-footer theme="dark" id="darkFooterWithLinks">\n    <span slot="copyright">\n      Red Hat Inc. Internal Use Only.\n    </span>\n  </opc-footer>');var f=s,C=document.querySelector("opc-footer");C.opcLinkCategories=f,C.addEventListener("opc-footer-link:click",(function(){document.querySelector("opc-feedback").toggle()}),!1),document.addEventListener("DOMContentLoaded",(function(){document.querySelector("body").style.visibility="visible"})),window.OpAuthHelper.onLogin((function(){c("\nquery HomePageQuery {\n  apps {\n    id\n    applicationType\n    name\n    icon\n    isActive\n    path\n  }\n}").then((function(e){var t,n,r,o,i,a=e.data.apps?e.data.apps:[];t=a,null!==(n=document.querySelector("#banner-links"))&&(n.innerHTML=t.map((function(e){if(e)return'<a href="'.concat(e.link,'"><em class="fa ').concat(e.icon,'"></em>').concat(e.name,"</a>")})).splice(0,10).join("")),A(a),localStorage.setItem("spaList",JSON.stringify(a)),r=d,null!==(o=document.querySelector("#microservice-cards"))&&(o.innerHTML=r.map((function(e){return'<div class="section__microservices-card">\n                <div class="section__microservices-card-header">\n                  <div class="section__microservices-card-header-image" style="background-color: '.concat(e.imgBgColor,'">\n                    <img src="').concat(e.icon,'" alt="">\n                  </div>\n                  <h3>\n                    ').concat(e.name,'\n                  </h3>\n                </div>\n                <div class="section__microservices-card-description">\n                  ').concat(e.description,'\n                </div>\n                <a target="_blank" rel="noopener" href="').concat(e.link,'" class="section__microservices-card-cta">\n                  Read More\n                </a>\n              </div>')})).join("")),null!==(i=document.querySelector("#team-block"))&&c('\nquery ContactUsQuery{\n  group (cn:"one-portal-devel") {\n    members {\n      cn\n      rhatJobTitle\n    }\n  }\n}\n').then((function(e){var t=e.data.group.members.sort((function(e,t){return e.cn.localeCompare(t.cn)}));i.innerHTML=t.map((function(e){return'\n      <div class="team-block__list--item">\n          <img src="/res/img/avatar.svg" alt="">\n          <span class="name">'.concat(e.cn,'</span>\n          <span class="title">').concat(e.rhatJobTitle,"</span>\n      </div>")})).join("")})).catch((function(e){console.error(e)}))})).catch((function(e){console.error(e)}))}))},800:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(15),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"@import url(https://fonts.googleapis.com/css?family=Red+Hat+Text&display=swap);"]),a.push([e.id,".banner{text-align:center;margin-top:8rem;margin-bottom:8rem}.banner__404{margin-bottom:2rem}.banner__404 img{height:11rem}.banner__text-block--medium h1{font-size:2.5rem;margin:0 0 2rem 0;color:#151515}.banner__text-block--normal{font-size:1.5rem;margin-bottom:2rem;color:#151515}.banner__links-below{font-size:1.4rem;color:#151515;margin:2rem 0 1rem 0}.banner>a{display:inline-block}.banner>a i{margin-left:0.5rem;transition:all 320ms ease-in-out}.banner>a:hover i{transform:translateX(3px)}.banner__links{list-style:none;display:flex;flex-wrap:wrap;justify-content:center;font-size:20px}.banner__links a{text-decoration:none;color:#151515;margin:0 1rem;position:relative;padding:0.6rem 0.6rem}.banner__links a i{margin-right:0.5rem}.banner__links a::before{content:'';background-color:#151515;height:1px;width:0;position:absolute;bottom:0;right:0;transition:all 320ms ease-in-out}.banner__links a:hover::before{left:0;width:100%}.contact-block{display:flex;justify-content:space-between;margin:4rem auto}.contact-block__left--header{margin-top:1rem;color:#0C0000;font-size:1.5rem}.contact-block__mail-list{display:grid;grid-template-columns:1fr 1fr;grid-gap:2rem;margin:2.5rem}.contact-block__mail-list--block{display:flex;flex-direction:column;font-size:1rem}.contact-block__mail-list--block span{font-weight:600;color:#000000}.contact-block__mail-list--block a{color:#72767B;text-decoration:none}.team-block{margin:2rem 0}.team-block>h2{font-size:1.5rem;font-weight:200}.team-block__list{display:grid;grid-template-columns:repeat(5, 1fr);grid-gap:4.25rem;justify-content:center;margin-top:2.5rem}.team-block__list--item{display:flex;flex-direction:column;align-items:center}.team-block__list--item>span{text-align:center}.team-block__list--item .name{color:#000000;font-size:16px;margin-top:4px}.team-block__list--item .title{color:#4C4C4C;font-size:14px}.header{display:flex;flex-wrap:wrap;flex:1;transform:translate(20px, 9rem);margin:auto}.header__content{flex:1 0 21.875rem}.header__action-buttons{margin-top:1.5rem}.header__action-buttons a{padding:1rem 2rem;margin-right:1rem}.header__action-buttons a:first-of-type{color:#C9190B;background-color:#FAEAE8}.header__action-buttons a:last-of-type{color:#333333;background-color:#F5F5F5}.header__content-heading{font-size:2rem;font-weight:300;margin-bottom:1.5rem}.header__illustration{max-width:25rem;height:31.25rem;transform:translate(20px, -10rem)}.header__illustration .transform-node-app{transform:translate(18rem, -6.5rem)}.header__illustration .transform-node-spaship{transform:translate(18rem, -10.5rem)}.header__illustration .transform-node-gateway{transform:translate(18rem, -15.5rem)}.header__illustration .transform-node-core{transform:translate(18rem, -26.5rem)}.header__illustration-connector{position:absolute;display:flex;align-items:center;animation:nodetext 3s cubic-bezier(0.17, 0.67, 0.83, 0.67)}.header__illustration-connector>span{color:#A0A0A0;margin-left:0.5rem}.header__illustration-node{display:flex;align-items:center}.header__illustration-node-start{border-top:1px solid #A0A0A0;border-bottom:1px solid #A0A0A0;border-right:1px solid #A0A0A0;width:1.875rem}.header__illustration-node-start.medium{height:5.25rem}.header__illustration-node-start.small{height:2.5rem}.header__illustration-node-start.large{height:5.375rem}.header__illustration-node-end{height:1px;width:1.875rem;background:#A0A0A0}.header__illustration img{position:relative;width:17.5rem}.header__illustration-cubes{transform:translate(0px, 2rem);transition:all 320ms ease-in-out;animation:moveCubes 3s ease-in-out;z-index:3}@keyframes moveCubes{0%{transform:translateY(7.5rem)}100%{transform:translateY(2rem)}}.header__illustration-spaship{transform:translate(0px, -4rem);transition:all 320ms ease-in-out;z-index:2;animation:spaship 3s ease-in-out}@keyframes spaship{0%{transform:translateY(-2em)}100%{transform:translateY(-4rem)}}.header__illustration-gateway{transform:translate(0px, -8.5rem);transition:all 320ms ease-in-out;z-index:1;animation:gateway 3s ease-in-out}@keyframes gateway{0%{transform:translateY(-11.5rem)}100%{transform:translateY(-8.5rem)}}.header__illustration-core{transform:translate(0px, -15.5rem);transition:all 320ms ease-in-out;animation:core 3s ease-in-out}@keyframes core{0%{transform:translateY(-22rem)}100%{transform:translateY(-15.5rem)}}.section{display:grid;grid-template-columns:2fr 10fr;gap:2rem;margin:5rem auto}.section__main>div{margin-bottom:7rem}.section__sidebar{position:sticky;top:4.5rem;height:14.375rem;margin-top:4.5rem}.section__sidebar-header{text-transform:uppercase}.section__sidebar-links div ul li a{--pf-c-tabs__link--after--BorderColor: #EE0000}.section__sidebar-links div ul li a:hover{--pf-c-tabs__link--after--BorderColor: #D2D2D2}.section__header{color:#151515;font-size:2.25rem;padding:4rem 0 0 0}.section__app-deployment-cards{margin-top:2rem;display:flex;flex-wrap:wrap;flex:1 1 auto;gap:1.5rem}.section__app-deployment-card{height:24rem;width:20rem;border:1px solid #D2D2D2;border-radius:5px 5px 3px 3px;padding:1rem}.section__app-deployment-card-image{height:9.75rem;width:9.75rem;border-radius:100%;background-color:#FAFAFA;margin:0 auto 3rem auto}.section__app-deployment-card-header{font-size:1.5rem;margin-bottom:1rem}.section__app-deployment-card-description{font-size:1.125rem}.section__app-deployment-action-buttons{margin-top:2rem}.section__app-deployment-action-buttons button,.section__app-deployment-action-buttons a{padding:1rem 2rem;margin-right:1rem}.section__app-deployment-action-buttons button:first-of-type{color:#C9190B;background-color:#FAEAE8}.section__app-deployment-action-buttons a:first-of-type{color:#333333;background-color:#F5F5F5}.section__microservices-cards{margin-top:2rem;display:flex;flex-wrap:wrap;flex:1 1 auto;gap:1.5rem}.section__microservices-card{display:flex;flex-direction:column;justify-content:space-between;height:21rem;width:20rem;border:1px solid #D2D2D2;border-radius:3px;padding:1rem}.section__microservices-card-header{display:flex;align-items:center;margin-bottom:1.5rem}.section__microservices-card-header-image{display:grid;place-items:center;height:5rem;width:5rem;border-radius:100%}.section__microservices-card-header-image img{max-width:2.5rem;max-height:2.5rem}.section__microservices-card-header h3{margin-left:1rem;font-size:1.5rem}.section__microservices-card-description{font-size:1.125rem;color:#151515;margin-bottom:2rem;height:7.5rem;overflow:hidden}.section__microservices-card-cta{border:1px solid #151515;color:#151515;font-weight:bolder;padding:1rem 2rem;width:14ch}.section__microservices-card-cta:hover{text-decoration:none;box-shadow:1px 2px 3px #ddd}.section__applications-cards{margin-top:2rem;display:flex;flex-wrap:wrap;flex:1 1 auto;gap:1.5rem}.section__applications>div{margin-top:1rem}.section__applications-spinner{display:grid;width:100%;place-items:center;height:24rem}.section__applications-card{width:14rem;height:12rem;border:1px solid #DDDDDD;border-radius:8px}.section__applications-card-image{background-color:#fafafa;height:80%;display:grid;place-content:center}.section__applications-card-image img{width:4rem;height:4rem}.section__applications-card-label{color:#151515;padding:0.5rem 1rem;display:flex;justify-content:space-between;align-items:center}.section__applications-card:hover{text-decoration:none;box-shadow:1px 2px 3px #33333330}.section__applications ul li button{--pf-c-tabs__link--after--BorderColor: #EE0000}.section__applications ul li button:hover{--pf-c-tabs__link--after--BorderColor: #D2D2D2}.section__applications-view-more{margin-top:2rem;padding:1rem 2rem;background-color:#F5F5F5;border:none;color:#333333}#deploy-spa-modal{display:none}#deploy-submit{display:flex;align-items:center;color:#C9190B;background-color:#FAEAE8}#deploy-submit:disabled{color:#333333;background-color:#F5F5F5;cursor:no-drop}#deploy-submit span{margin-right:.5rem}#app-path-label i{position:relative;color:#888888}#app-path-label i[title]:hover::after{content:attr(title);position:absolute;width:25ch;bottom:30px;background-color:white;padding:1rem;box-shadow:1px 2px 4px #a0a0a0;border-radius:10px;color:#7b7b7b;right:-100px}@keyframes nodetext{0%{opacity:0}100%{opacity:1}}@media (max-width: 1500px){.header{display:grid;grid-template-columns:1fr 1fr}}@media (max-width: 850px){.header{display:block}.header__illustration{display:none}.header__action-buttons{padding-bottom:4rem}}html{scroll-behavior:smooth}body{font-family:'Red Hat Text', sans-serif;box-sizing:border-box;margin:0;padding:0}.container{max-width:1250px}.margin-auto{margin:auto}\n","",{version:3,sources:["webpack://./src/404/404.scss","webpack://./src/contact-us/contact-us.scss","webpack://./src/home/home.scss","webpack://./src/index.scss"],names:[],mappings:"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",sourcesContent:[".banner {\n    text-align: center;\n    margin-top: 8rem;\n    margin-bottom: 8rem;\n    &__404 {\n        img {\n            height: 11rem;\n        }\n        margin-bottom: 2rem;\n    }\n    &__text-block--medium {\n        h1 {\n            font-size: 2.5rem;\n            margin: 0 0 2rem 0;\n            color: #151515;\n        }\n    }\n    &__text-block--normal {\n        font-size: 1.5rem;\n        margin-bottom: 2rem;\n        color: #151515;\n    }\n    &__links-below {\n        font-size: 1.4rem;\n        color: #151515;\n        margin: 2rem 0 1rem 0;\n    }\n    &>a {\n        display: inline-block;\n        i {\n            margin-left: 0.5rem;\n            transition: all 320ms ease-in-out;\n        }\n        &:hover {\n            i {\n                transform: translateX(3px);\n            }\n        }\n    }\n    &__links {\n        list-style: none;\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: center;\n        font-size: 20px;\n        a {\n            text-decoration: none;\n            color: #151515;\n            margin: 0 1rem;\n            position: relative;\n            padding: 0.6rem 0.6rem;\n            i {\n                margin-right: 0.5rem;\n            }\n        }\n        a::before {\n            content: '';\n            background-color: #151515;\n            height: 1px;\n            width: 0;\n            position: absolute;\n            bottom: 0;\n            right: 0;\n            transition: all 320ms ease-in-out;\n        }\n        a:hover::before {\n            left: 0;\n            width: 100%;\n        }\n    }\n}\n",".contact-block {\n    display: flex;\n    justify-content: space-between;\n    margin: 4rem auto;\n    &__left {\n        &--header {\n            margin-top: 1rem;\n            color: #0C0000;\n            font-size: 1.5rem;\n        }\n    }\n    &__mail-list {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        grid-gap: 2rem;\n        margin: 2.5rem;\n        &--block {\n            display: flex;\n            flex-direction: column;\n            font-size: 1rem;\n            span {\n                font-weight: 600;\n                color: #000000\n            }\n            a {\n                color: #72767B;\n                text-decoration: none;\n            }\n        }\n    }\n}\n.team-block {\n    margin: 2rem 0;\n    &>h2 {\n        font-size: 1.5rem;\n        font-weight: 200;\n    }\n\n    &__list {\n        display: grid;\n        grid-template-columns: repeat(5, 1fr);\n        grid-gap: 4.25rem;\n        justify-content: center;\n        margin-top: 2.5rem;\n        &--item {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            &>span {\n                text-align: center;\n            }\n\n            .name {\n                color: #000000;\n                font-size: 16px;\n                 margin-top: 4px;\n            }\n            .title {\n                color: #4C4C4C;\n                font-size: 14px;\n            }\n        }\n    }\n}\n","// mixin\n@mixin cards {\n  margin-top: 2rem;\n  display: flex;\n  flex-wrap: wrap;\n  flex: 1 1 auto;\n  gap: 1.5rem;\n}\n@function toRem($pxs) {\n  $remValue: ($pxs /16) + rem;\n  @return $remValue;\n}\n@mixin moveLayers ($name, $from, $to) {\n  animation: #{$name} 3s ease-in-out;\n  @keyframes #{$name} {\n    0% {\n      transform: translateY($from);\n    }\n    100% {\n      transform: translateY($to);\n    }\n  }\n}\n\n.header {\n  display: flex;\n  flex-wrap: wrap;\n  flex: 1;\n  transform: translate(20px, 9rem);\n  margin: auto;\n  &__content {\n    flex: 1 0 21.875rem;\n  }\n  &__action-buttons {\n    margin-top: 1.5rem;\n    a {\n      padding: 1rem 2rem;\n      margin-right: 1rem;\n    }\n    a:first-of-type {\n      color: #C9190B;\n      background-color: #FAEAE8;\n    }\n    a:last-of-type {\n      color: #333333;\n      background-color: #F5F5F5;\n    }\n  }\n  &__content-heading {\n    font-size: 2rem;\n    font-weight: 300;\n    margin-bottom: 1.5rem;\n  }\n  &__illustration {\n    max-width: 25rem;\n    height: 31.25rem;\n    transform: translate(20px, -10rem);\n    .transform-node {\n      &-app {\n        transform: translate(18rem, -6.5rem);\n      }\n      &-spaship {\n        transform: translate(18rem, -10.5rem);\n      }\n      &-gateway {\n        transform: translate(18rem, -15.5rem);\n      }\n      &-core {\n        transform: translate(18rem, -26.5rem);\n      }\n    }\n    &-connector {\n      position: absolute;\n      display: flex;\n      align-items: center;\n      animation: nodetext 3s cubic-bezier(.17,.67,.83,.67);\n      & > span {\n        color: #A0A0A0;\n        margin-left: 0.5rem;\n      }\n    }\n    &-node {\n      display: flex;\n      align-items: center;\n      &-start {\n        border-top: 1px solid #A0A0A0;\n        border-bottom: 1px solid #A0A0A0;\n        border-right: 1px solid #A0A0A0;\n        width: toRem(30);\n        &.medium {\n          height: toRem(84);\n        }\n        &.small {\n          height: toRem(40);\n        }\n        &.large {\n          height: toRem(86);\n        }\n      }\n      &-end {\n        height: 1px;\n        width: toRem(30);\n        background: #A0A0A0;\n      }\n\n    }\n    img {\n      position: relative;\n      width: toRem(280);\n    }\n    &-cubes {\n      transform: translate(0px, 2rem);\n      transition: all 320ms ease-in-out;\n      @include moveLayers('moveCubes', 7.5rem, 2rem); \n      z-index: 3;\n    }\n    &-spaship {\n      transform: translate(0px, -4rem);\n      transition: all 320ms ease-in-out;\n      z-index: 2;\n      @include moveLayers('spaship', -2em, -4rem);\n}\n    \n    &-gateway {\n      transform: translate(0px, -8.5rem);\n      transition: all 320ms ease-in-out;\n      z-index: 1;\n      @include moveLayers('gateway', -11.5rem, -8.5rem);\n}\n    \n    &-core {\n      transform: translate(0px, -15.5rem);\n      transition: all 320ms ease-in-out;\n      @include moveLayers('core', -22rem, -15.5rem);\n}\n    \n  }\n}\n\n.section {\n  display: grid;\n  grid-template-columns: 2fr 10fr;\n  gap: 2rem;\n  margin: 5rem auto;\n  &__main > div {\n    margin-bottom: 7rem;\n  }\n  // Sidebar\n  &__sidebar {\n    position: sticky;\n    top: toRem(72);\n    height: toRem(230);\n    margin-top: 4.5rem;\n    &-header {\n      text-transform: uppercase;\n    }\n    &-links {\n      div {\n        ul {\n          li {\n            a {\n              --pf-c-tabs__link--after--BorderColor: #EE0000;\n              &:hover {\n                --pf-c-tabs__link--after--BorderColor: #D2D2D2;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  // Common header\n  &__header {\n    color: #151515;\n    font-size: 2.25rem;\n    padding: 4rem 0 0 0;\n  }\n  // app-deployment section and cards\n  &__app-deployment {\n    &-cards {\n      @include cards;\n    }\n    &-card {\n      height: 24rem;\n      width: 20rem;\n      border: 1px solid #D2D2D2;\n      border-radius: 5px 5px 3px 3px;\n      padding: 1rem;\n      &-image {\n        height: 9.75rem;\n        width: 9.75rem;\n        border-radius: 100%;\n        background-color: #FAFAFA;\n        margin: 0 auto 3rem auto;\n      }\n      &-header {\n        font-size: 1.5rem;\n        margin-bottom: 1rem;\n      }\n      &-description {\n        font-size: 1.125rem;\n      }\n    }\n    &-action-buttons {\n      margin-top: 2rem;\n      button, a {\n        padding: 1rem 2rem;\n        margin-right: 1rem;\n      }\n      button:first-of-type {\n        color: #C9190B;\n        background-color: #FAEAE8;\n      }\n      a:first-of-type {\n        color: #333333;\n        background-color: #F5F5F5;\n      }\n    }\n  }\n  // microservice section and cards\n  &__microservices {\n    &-cards {\n      @include cards\n    }\n    &-card {\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n      height: 21rem;\n      width: 20rem;\n      border: 1px solid #D2D2D2;\n      border-radius: 3px;\n      padding: 1rem;\n      &-header {\n        display: flex;\n        align-items: center;\n        margin-bottom: 1.5rem;\n        &-image {\n          display: grid;\n          place-items: center;\n          height: 5rem;\n          width: 5rem;\n          border-radius: 100%;\n          img {\n            max-width: 2.5rem;\n            max-height: 2.5rem;\n          }\n        }\n        h3 {\n          margin-left: 1rem;\n          font-size: 1.5rem;\n        }\n      }\n      &-description {\n        font-size: 1.125rem;\n        color: #151515;\n        margin-bottom: 2rem;\n        height: 7.5rem;\n        overflow: hidden;\n      }\n      &-cta {\n        border: 1px solid #151515;\n        color: #151515;\n        font-weight: bolder;\n        padding: 1rem 2rem;\n        width: 14ch;\n        &:hover {\n          text-decoration: none;\n          box-shadow: 1px 2px 3px #ddd;\n        }\n      }\n    }\n  }\n  // application section and cards\n  &__applications {\n    &-cards {\n      @include cards;\n    }\n    & > div {\n      margin-top: 1rem;\n    }\n    &-spinner {\n      display: grid;\n      width: 100%;\n      place-items: center;\n      height: 24rem;\n    }\n    &-card {\n      width: 14rem;\n      height: 12rem;\n      border: 1px solid #DDDDDD;\n      border-radius: 8px;\n      &-image {\n        background-color: #fafafa;\n        height: 80%;\n        display: grid;\n        place-content: center;\n        img {\n          width: 4rem;\n          height: 4rem;\n        }\n      }\n      &-label {\n        color: #151515;\n        padding: 0.5rem 1rem;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      &:hover {\n        text-decoration: none;\n        box-shadow: 1px 2px 3px #33333330;\n      }\n    }\n    ul {\n      li {\n        button {\n          --pf-c-tabs__link--after--BorderColor: #EE0000;\n          &:hover {\n            --pf-c-tabs__link--after--BorderColor: #D2D2D2;\n          }\n        }\n      }\n    }\n    &-view-more {\n      margin-top: 2rem;\n      padding: 1rem 2rem;\n      background-color: #F5F5F5;\n      border: none;\n      color: #333333;\n    }\n  }\n}\n\n#deploy-spa-modal {\n  display: none;\n}\n#deploy-submit {\n  display: flex;\n  align-items: center;\n  color: #C9190B;\n  background-color: #FAEAE8;\n  &:disabled {\n    color: #333333;\n    background-color: #F5F5F5;\n    cursor: no-drop;\n  }\n  span {\n    margin-right: .5rem;\n  }\n}\n#app-path-label {\n  i {\n    position: relative;\n    color: #888888;\n  }\n  i[title]:hover::after {\n    content: attr(title);\n    position: absolute;\n    width: 25ch;\n    bottom: 30px;\n    background-color: white;\n    padding: 1rem;\n    box-shadow: 1px 2px 4px #a0a0a0;\n    border-radius: 10px;\n    color: #7b7b7b;\n    right: -100px;\n  }\n}\n\n@keyframes nodetext {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@media (max-width: 1500px) {\n  .header {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n  }\n}\n\n@media (max-width: 850px) {\n  .header {\n    display: block;\n    &__illustration {\n      display: none;\n    }\n    &__action-buttons {\n      padding-bottom: 4rem;\n    }\n  }\n}\n\n","@import './404/404.scss';\n@import './contact-us/contact-us.scss';\n@import './home/home.scss';\n@import url('https://fonts.googleapis.com/css?family=Red+Hat+Text&display=swap');\n\nhtml {\n  scroll-behavior: smooth;\n}\nbody {\n  font-family: 'Red Hat Text', sans-serif;\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n.container {\n  max-width: 1250px;\n}\n\n.margin-auto {\n  margin: auto;\n}\n"],sourceRoot:""}]);const s=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},15:e=>{"use strict";function t(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n=t(e,4),r=n[1],o=n[3];if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(a," */"),l=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[r].concat(l).concat([s]).join("\n")}return[r].join("\n")}},379:(e,t,n)=>{"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function s(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],l=t.base?i[0]+t.base:i[0],c=n[l]||0,d="".concat(l," ").concat(c);n[l]=c+1;var p=s(d),m={css:i[1],media:i[2],sourceMap:i[3]};-1!==p?(a[p].references++,a[p].updater(m)):a.push({identifier:d,updater:f(m,t),references:1}),r.push(d)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var d,p=(d=[],function(e,t){return d[e]=t,d.filter(Boolean).join("\n")});function m(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=p(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function A(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,u=0;function f(e,t){var n,r,o;if(t.singleton){var i=u++;n=h||(h=c(t)),r=m.bind(null,n,i,!1),o=m.bind(null,n,i,!0)}else n=c(t),r=A.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=s(n[r]);a[o].references--}for(var i=l(e,t),c=0;c<n.length;c++){var d=s(n[c]);0===a[d].references&&(a[d].updater(),a.splice(d,1))}n=i}}}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);n(749)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,