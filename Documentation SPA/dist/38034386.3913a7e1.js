(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{153:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),s=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):b(b({},t),e)),n},d=function(e){var t=s(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=a,m=d["".concat(c,".").concat(u)]||d[u]||p[u]||i;return n?r.a.createElement(m,b(b({ref:t},o),{},{components:n})):r.a.createElement(m,b({ref:t},o))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,c=new Array(i);c[0]=u;var b={};for(var l in t)hasOwnProperty.call(t,l)&&(b[l]=t[l]);b.originalType=e,b.mdxType="string"==typeof e?e:a,c[1]=b;for(var o=2;o<i;o++)c[o]=n[o];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(2),r=n(6),i=(n(0),n(153)),c={id:"feedback-service",title:"Feedback Service",sidebar_label:"Feedback Service",slug:"/microservices/feedback-service"},b={unversionedId:"microservices/feedback/feedback-service",id:"microservices/feedback/feedback-service",isDocsHomePage:!1,title:"Feedback Service",description:"Developers",source:"@site/docs/microservices/feedback/feedback-service.md",slug:"/microservices/feedback-service",permalink:"/get-started/docs/microservices/feedback-service",editUrl:"https://github.com/1-platform/one-platform/edit/master/packages/documentation-spa/docs/microservices/feedback/feedback-service.md",version:"current",sidebar_label:"Feedback Service",sidebar:"someSidebar",previous:{title:"Apps Service",permalink:"/get-started/docs/microservices/apps-service"},next:{title:"Home Service",permalink:"/get-started/docs/microservices/home-service"}},l=[{value:"Developers",id:"developers",children:[{value:"Component Contributors",id:"component-contributors",children:[]}]},{value:"Getting Started",id:"getting-started",children:[]},{value:"Usage",id:"usage",children:[{value:"Introduction",id:"introduction",children:[]},{value:"Supported Features",id:"supported-features",children:[]},{value:"Quick Start Guide",id:"quick-start-guide",children:[]},{value:"Start",id:"start",children:[]},{value:"Build",id:"build",children:[]},{value:"Testing",id:"testing",children:[]}]},{value:"API References",id:"api-references",children:[{value:"Queries",id:"queries",children:[]},{value:"Mutations",id:"mutations",children:[]}]}],o={rightToc:l};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"developers"},"Developers"),Object(i.b)("h3",{id:"component-contributors"},"Component Contributors"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Rigin Oommen - ",Object(i.b)("a",{parentName:"li",href:"mailto:roommen@redhat.com"},"roommen@redhat.com")," - ",Object(i.b)("a",{parentName:"li",href:"https://github.com/riginoommen"},"riginoommen (Rigin Oommen) \xb7 GitHub"))),Object(i.b)("h2",{id:"getting-started"},"Getting Started"),Object(i.b)("p",null,"Feedback Microservice is one of the major pillar of One Platform ecosystem. This enables the support to share the feedback with the project management tools."),Object(i.b)("h4",{id:"integrations-supported"},"Integrations Supported"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Jira"),Object(i.b)("li",{parentName:"ul"},"GitLab"),Object(i.b)("li",{parentName:"ul"},"GitHub")),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("h3",{id:"introduction"},"Introduction"),Object(i.b)("p",null,"Feedback microservice is built using NodeJS. This interface collects the data from GraphQL API and interacts with the project management tool provided in the configuration"),Object(i.b)("h3",{id:"supported-features"},"Supported Features"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Create Feedback"),Object(i.b)("li",{parentName:"ol"},"Update Feedback"),Object(i.b)("li",{parentName:"ol"},"Update Feedback Index"),Object(i.b)("li",{parentName:"ol"},"Delete Feedback"),Object(i.b)("li",{parentName:"ol"},"List all Feedbacks"),Object(i.b)("li",{parentName:"ol"},"List Feedback by ID")),Object(i.b)("h4",{id:"apps-using-this-microservice"},"Apps using this microservice"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"All Native and Non native SPAs")),Object(i.b)("h3",{id:"quick-start-guide"},"Quick Start Guide"),Object(i.b)("h4",{id:"prerequisites"},"Prerequisites"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"NodeJS")," should be installed (",Object(i.b)("em",{parentName:"li"},"version\\",">","=__v14.15.4"),")"),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"NPM")," should be installed ",Object(i.b)("em",{parentName:"li"},"(version\\",">","= ",Object(i.b)("strong",{parentName:"em"},"6.4.1")," )")),Object(i.b)("li",{parentName:"ol"},"Version control system required. Preferably ",Object(i.b)("strong",{parentName:"li"},"git"),".")),Object(i.b)("h4",{id:"steps"},"Steps"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Clone the ",Object(i.b)("a",{parentName:"li",href:"https://github.com/1-Platform/one-platform"},"repository"),".")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"git clone git@github.com:1-Platform/one-platform.git\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Switch the working directory to the user microservice")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"cd one-platform/packages/feedback-service\n")),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},"Install the microservice dependencies.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"npm i\n")),Object(i.b)("h3",{id:"start"},"Start"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Run npm start:dev to run your microservice for dev env and npm start for production env."),Object(i.b)("li",{parentName:"ol"},"Navigate to port 8080 to see the microservice.")),Object(i.b)("p",null,"eg: http://localhost:8080/graphql"),Object(i.b)("h3",{id:"build"},"Build"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",{parentName:"li",href:"https://webpack.js.org/"},"Webpack")," is used for the build system in the microservices."),Object(i.b)("li",{parentName:"ol"},"Run npm build:dev to generate a build for dev env and npm build for production build.")),Object(i.b)("h3",{id:"testing"},"Testing"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"For testing microservice with ",Object(i.b)("a",{parentName:"li",href:"https://www.npmjs.com/package/supertest"},"supertest")," with the preconfigured settings."),Object(i.b)("li",{parentName:"ol"},"Test related environment configurations are present in .test.env under the e2e folder."),Object(i.b)("li",{parentName:"ol"},"Execute the command for testing.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"npm run test\n")),Object(i.b)("h2",{id:"api-references"},"API References"),Object(i.b)("p",null,"In the GraphQL GET Operations are defined as Queries and POST/PUT/PATCH operations are defined as Mutations."),Object(i.b)("h3",{id:"queries"},"Queries"),Object(i.b)("h4",{id:"list-all-feedbacks"},"List all Feedbacks"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - ListFeedbacks")),Object(i.b)("p",null,"Example Query"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"query ListFeedbacks {\n  listFeedbacks {\n    _id\n    summary\n    description\n    experience\n    error\n    config\n    state\n    ticketUrl\n    category\n    source\n    module\n    assignee{\n      name\n      uid\n      email\n    }\n    createdOn\n    createdBy {\n      name\n      uid\n      email\n    }\n    updatedOn\n    updatedBy {\n      name\n      uid\n    }\n  }\n}\n")),Object(i.b)("p",null,"@@### List Feedback"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - ListFeedback"),Object(i.b)("li",{parentName:"ul"},"Variables - ",Object(i.b)("inlineCode",{parentName:"li"},"_id"))),Object(i.b)("p",null,"Example Query"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"query ListFeedbacks($_id: ID!) {\n  listFeedback(_id: $_id) {\n    _id\n    summary\n    description\n    experience\n    error\n    config\n    state\n    ticketUrl\n    category\n    source\n    module\n    assignee{\n      name\n      uid\n      email\n    }\n    createdOn\n    createdBy {\n      name\n      uid\n      email\n    }\n    updatedOn\n    updatedBy {\n      name\n      uid\n    }\n  }\n}\n")),Object(i.b)("h3",{id:"mutations"},"Mutations"),Object(i.b)("h4",{id:"create-feedback"},"Create feedback"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Create new feedback to database and open the ticket accordingly.")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Operation Name - CreateFeedback")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Variables - ",Object(i.b)("em",{parentName:"p"},"FeedbackInput")))),Object(i.b)("p",null,"Example Mutation"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"mutation CreateFeedback($input: FeedbackInput!) {\n  createFeedback(input: $input) {\n    _id\n    ticketUrl\n  }\n}\n")),Object(i.b)("h4",{id:"update-feedback"},"Update feedback"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - UpdateFeedback"),Object(i.b)("li",{parentName:"ul"},"Variables - ",Object(i.b)("em",{parentName:"li"},"FeedbackInput"))),Object(i.b)("p",null,"Example Mutation"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"mutation UpdateFeedback($input: FeedbackInput!) {\n  updateFeedback(input: $input) {\n    _id\n    summary\n    description\n    experience\n  }\n}\n")),Object(i.b)("h4",{id:"delete-feedback"},"Delete feedback"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - DeleteFeedback"),Object(i.b)("li",{parentName:"ul"},"Variables - _",Object(i.b)("em",{parentName:"li"},"id"))),Object(i.b)("p",null,"Example Mutation"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"mutation UpdateFeedback($input: FeedbackInput!) {\n  updateFeedback(input: $input) {\n    _id\n    summary\n    description\n    experience\n  }\n}\n")),Object(i.b)("h4",{id:"update-feedback-search-index"},"Update feedback search index"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - UpdateFeedbackIndex")),Object(i.b)("p",null,"Example Mutation"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"mutation UpdateFeedbackIndex {\n  updateFeedbackIndex{\n    status\n  }\n}\n")))}s.isMDXComponent=!0}}]);