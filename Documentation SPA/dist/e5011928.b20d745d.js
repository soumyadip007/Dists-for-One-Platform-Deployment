(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{141:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return c})),r.d(t,"metadata",(function(){return o})),r.d(t,"rightToc",(function(){return p})),r.d(t,"default",(function(){return b}));var n=r(2),a=r(6),i=(r(0),r(153)),c={id:"user-groups-service",title:"User/Group Service",sidebar_label:"User/Group Service",slug:"/microservices/user-groups-service"},o={unversionedId:"microservices/user-groups/user-groups-service",id:"microservices/user-groups/user-groups-service",isDocsHomePage:!1,title:"User/Group Service",description:"*",source:"@site/docs/microservices/user-groups/user-groups-service.md",slug:"/microservices/user-groups-service",permalink:"/get-started/docs/microservices/user-groups-service",editUrl:"https://github.com/1-platform/one-platform/edit/master/packages/documentation-spa/docs/microservices/user-groups/user-groups-service.md",version:"current",sidebar_label:"User/Group Service",sidebar:"someSidebar",previous:{title:"Getting Started with Notification Templates",permalink:"/get-started/docs/microservices/notifications-service/get-started"},next:{title:"Search Service",permalink:"/get-started/docs/microservices/search-service"}},p=[{value:"Developers",id:"developers",children:[{value:"Component Contributors",id:"component-contributors",children:[]}]},{value:"Getting Started",id:"getting-started",children:[]},{value:"Usage",id:"usage",children:[{value:"Introduction",id:"introduction",children:[]},{value:"Supported Features",id:"supported-features",children:[]},{value:"Apps using this microservice",id:"apps-using-this-microservice",children:[]},{value:"Quick Start Guide",id:"quick-start-guide",children:[]}]},{value:"API References",id:"api-references",children:[{value:"Queries",id:"queries",children:[]},{value:"Mutations",id:"mutations",children:[]}]}],s={rightToc:p};function b(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("hr",null),Object(i.b)("h2",{id:"developers"},"Developers"),Object(i.b)("h3",{id:"component-contributors"},"Component Contributors"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Rigin Oommen - ",Object(i.b)("a",{parentName:"li",href:"mailto:roommen@redhat.com"},"roommen@redhat.com")," - ",Object(i.b)("a",{parentName:"li",href:"https://github.com/riginoommen"},"riginoommen (Rigin Oommen) \xb7 GitHub")),Object(i.b)("li",{parentName:"ol"},"Ghanshyam Lohar - ",Object(i.b)("a",{parentName:"li",href:"mailto:glohar@redhat.com"},"glohar@redhat.com")," - ",Object(i.b)("a",{parentName:"li",href:"https://github.com/ghanlohar"},"ghanlohar (Ghanshyam Lohar) \xb7 GitHub"))),Object(i.b)("h2",{id:"getting-started"},"Getting Started"),Object(i.b)("p",null,"User group service acts as the primary pillar for obtaining enterprise user information for the one platform. This service talks to the organizational data sources like LDAP via Rover API."),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("h3",{id:"introduction"},"Introduction"),Object(i.b)("p",null,"User group microservice is built using NodeJS which has mongodb integration as database support. This microservice serves as the data store for the one platform. Most of the SPAs and microservices uses this data to populate user information."),Object(i.b)("h3",{id:"supported-features"},"Supported Features"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"GraphQL endpoints for the user and group information"),Object(i.b)("li",{parentName:"ol"},"Scripts to update the user information in data store."),Object(i.b)("li",{parentName:"ol"},"Rover integration.")),Object(i.b)("h3",{id:"apps-using-this-microservice"},"Apps using this microservice"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Feedback"),Object(i.b)("li",{parentName:"ol"},"Notifications")),Object(i.b)("h3",{id:"quick-start-guide"},"Quick Start Guide"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Prerequisites")),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"NodeJS"),"  should be installed (",Object(i.b)("em",{parentName:"li"},"version>=**v10.15.3"),")"),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"NPM")," should be installed ",Object(i.b)("em",{parentName:"li"},"(version>=",Object(i.b)("strong",{parentName:"em"},"6.4.1"),")")),Object(i.b)("li",{parentName:"ol"},"Version control system required. Preferably ",Object(i.b)("strong",{parentName:"li"},"git"),".")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Steps")),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Clone the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/1-Platform/one-platform"},"repository"),"."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-sh"},"git clone git@github.com:1-Platform/one-platform.git\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Switch the working directory to the user  microservice"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-sh"},"cd one-platform/packages/user-group-service\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Install the microservice dependencies."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-sh"},"npm i\n")))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Start")),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Run npm start:dev to run your microservice for dev env and npm start for production env."),Object(i.b)("li",{parentName:"ol"},"Navigate to port 8080 to see the microservice.\neg: ",Object(i.b)("a",{parentName:"li",href:"http://localhost:8080/graphql"},"http://localhost:8080/graphql"))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Build")),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",{parentName:"li",href:"https://webpack.js.org"},"Webpack")," is used for the build system in the microservices."),Object(i.b)("li",{parentName:"ol"},"Run ",Object(i.b)("inlineCode",{parentName:"li"},"npm build:dev")," to generate a build for dev env and npm build for production build.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Testing")),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"For testing microservice with ",Object(i.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/supertest"},"supertest")," with the preconfigured settings.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Test related environment configurations are present in ",Object(i.b)("inlineCode",{parentName:"p"},".test.env")," under the ",Object(i.b)("inlineCode",{parentName:"p"},"e2e")," folder.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Execute the command for testing."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-sh"},"npm run test\n")))),Object(i.b)("h2",{id:"api-references"},"API References"),Object(i.b)("p",null,"In the GraphQL GET Operations are defined as Queries and POST/PUT/PATCH operations are defined as Mutations."),Object(i.b)("h3",{id:"queries"},"Queries"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("h3",{parentName:"li",id:"fetch-user"},"Fetch User"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Operation Name:")," getUserBy"),Object(i.b)("p",{parentName:"li"}," ",Object(i.b)("strong",{parentName:"p"},"Supported Query Variables:")," ",Object(i.b)("em",{parentName:"p"},"uid"),", ",Object(i.b)("em",{parentName:"p"},"rhatUUID")),Object(i.b)("p",{parentName:"li"}," ",Object(i.b)("strong",{parentName:"p"},"Example Query:")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-js"},"query getUserBy($uid: String) {\n    getUsersBy(uid: $uid) {\n        _id\n        uid\n        cn\n        isActive\n        rhatJobTitle\n        rhatCostCenter\n        rhatCostCenterDesc\n        employeeType\n        rhatOfficeLocation\n        mail\n        rhatUUID\n        serviceAccount\n        manager {\n            name\n            uid\n        }\n        roverGroups {\n            name\n            cn\n        }\n        createdOn\n        updatedOn\n    }\n}\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("h3",{parentName:"li",id:"fetch-all-users-list"},"Fetch All Users List"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Operation Name:")," ListUsers"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Example Query:")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-js"},"query ListUsers {\n    listUsers {\n        _id\n        uid\n        cn\n        isActive\n        rhatJobTitle\n        rhatCostCenter\n        rhatCostCenterDesc\n        employeeType\n        rhatOfficeLocation\n        mail\n        rhatUUID\n        serviceAccount\n        manager {\n            name\n            uid\n        }\n        roverGroups {\n            name\n            cn\n        }\n        createdOn\n        updatedOn\n    }\n}\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("h3",{parentName:"li",id:"search-users-based-on-a-criteria-from-rover-and-optionally-cache-them-into-the-cache-db"},"Search Users based on a criteria from Rover and optionally cache them into the cache DB."),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Operation Name:")," searchRoverUsers"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Supported Query Variables:")," ldapfield, value, cacheUser"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Example Query:")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-js"},"query searchRoverUsers( $ldapfield: ldapFieldType, $value: String, $cacheUser: Boolean ) {\n    searchRoverUsers( ldapfield: $ldapfield, value: $value, cacheUser: $cacheUser ) {\n        _id\n        uid\n        cn\n        isActive\n        rhatJobTitle\n        rhatCostCenter\n        rhatCostCenterDesc\n        employeeType\n        rhatOfficeLocation\n        mail\n        rhatUUID\n        serviceAccount\n        manager {\n            name\n            uid\n        }\n        roverGroups {\n            name\n            cn\n        }\n        createdOn\n        updatedOn\n    }\n}\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("h3",{parentName:"li",id:"fetch-group-details--members-included-in-a-rover-group"},"Fetch group details & members included in a Rover group"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Operation Name:")," group"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Supported Query Variables:")," cn"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Example Query:")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-js"},"query group($cn: String!) {\n    group(cn: $cn) {\n        cn\n        name\n        members {\n            name\n            uid\n            _id\n            rhatUUID\n            rhatJobTitle\n        }\n    }\n}\n")))),Object(i.b)("h3",{id:"mutations"},"Mutations"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("h3",{parentName:"li",id:"add-new-user"},"Add new user"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Operation Name:")," AddUser"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Required Mutation Variables:")," ",Object(i.b)("em",{parentName:"p"},"uid"),", ",Object(i.b)("em",{parentName:"p"},"rhatUUID")),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Example Mutation:")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-js"},"mutation AddUser($input: UserInput) {\n    addUser(input: $input) {\n        _id\n        uid\n        cn\n        isActive\n        rhatJobTitle\n        rhatCostCenter\n        rhatCostCenterDesc\n        employeeType\n        rhatOfficeLocation\n        mail\n        rhatUUID\n        serviceAccount\n        manager {\n            name\n            uid\n        }\n        roverGroups {\n            name\n            cn\n        }\n        createdOn\n        updatedOn\n    }\n}\n\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("h3",{parentName:"li",id:"add-new-user-from-rover"},"Add new user from Rover"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Operation Name:")," AddUserFromRover"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Required Mutation Variables:")," ",Object(i.b)("em",{parentName:"p"},"uid")),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Example Mutation:")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-js"},"mutation AddUserFromRover($uid: String!) {\n    addUserFromRover(uid: $uid) {\n        _id\n        uid\n        cn\n        isActive\n        rhatJobTitle\n        rhatCostCenter\n        rhatCostCenterDesc\n        employeeType\n        rhatOfficeLocation\n        mail\n        rhatUUID\n        serviceAccount\n        manager {\n            name\n            uid\n        }\n        roverGroups {\n            name\n            cn\n        }\n        createdOn\n        updatedOn\n    }\n}\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("h3",{parentName:"li",id:"update-user"},"Update user"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Operation Name:")," UpdateUser"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Required Mutation Variables:")," ",Object(i.b)("em",{parentName:"p"},"name"),", ",Object(i.b)("em",{parentName:"p"},"title"),", ",Object(i.b)("em",{parentName:"p"},"uid"),", ",Object(i.b)("em",{parentName:"p"},"rhatUUID"),", ",Object(i.b)("em",{parentName:"p"},"memberOf"),", ",Object(i.b)("em",{parentName:"p"},"createdBy"),", ",Object(i.b)("em",{parentName:"p"},"createdOn"),", ",Object(i.b)("em",{parentName:"p"},"updatedBy"),", ",Object(i.b)("em",{parentName:"p"},"updatedOn")),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Example Mutation:")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-js"},"mutation UpdateUser($input: UserInput) {\n    updateUser(input: $input) {\n        _id\n        uid\n        cn\n        isActive\n        rhatJobTitle\n        rhatCostCenter\n        rhatCostCenterDesc\n        employeeType\n        rhatOfficeLocation\n        mail\n        rhatUUID\n        serviceAccount\n        manager {\n            name\n            uid\n        }\n        roverGroups {\n            name\n            cn\n        }\n        createdOn\n        updatedOn\n    }\n}\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("h3",{parentName:"li",id:"delete-user"},"Delete user"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Operation Name:")," DeleteUser"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Required Mutation Variables:")," id"),Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Example Mutation:")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-js"},"mutation DeleteUser($id: String!) {\n    deleteUser(_id:$id) {\n        _id\n        uid\n        name\n        isActive\n        rhatJobTitle\n        rhatCostCenter\n        rhatCostCenterDesc\n        employeeType\n        rhatOfficeLocation\n        mobile\n        mail\n        rhatUUID\n        serviceAccount\n    }\n}\n")))))}b.isMDXComponent=!0},153:function(e,t,r){"use strict";r.d(t,"a",(function(){return l})),r.d(t,"b",(function(){return d}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a.a.createContext({}),b=function(e){var t=a.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=b(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),l=b(r),u=n,d=l["".concat(c,".").concat(u)]||l[u]||m[u]||i;return r?a.a.createElement(d,o(o({ref:t},s),{},{components:r})):a.a.createElement(d,o({ref:t},s))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,c=new Array(i);c[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,c[1]=o;for(var s=2;s<i;s++)c[s]=r[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"}}]);