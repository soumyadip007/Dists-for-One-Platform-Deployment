(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{153:function(e,t,r){"use strict";r.d(t,"a",(function(){return s})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=a.a.createContext({}),b=function(e){var t=a.a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},s=function(e){var t=b(e.components);return a.a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),s=b(r),u=n,m=s["".concat(l,".").concat(u)]||s[u]||d[u]||i;return r?a.a.createElement(m,p(p({ref:t},o),{},{components:r})):a.a.createElement(m,p({ref:t},o))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=u;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:n,l[1]=p;for(var o=2;o<i;o++)l[o]=r[o];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},61:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return l})),r.d(t,"metadata",(function(){return p})),r.d(t,"rightToc",(function(){return c})),r.d(t,"default",(function(){return b}));var n=r(2),a=r(6),i=(r(0),r(153)),l={id:"lighthouse-service",title:"Lighthouse Service",sidebar_label:"Lighthouse Service",slug:"/microservices/lighthouse-service"},p={unversionedId:"microservices/lighthouse-service/lighthouse-service",id:"microservices/lighthouse-service/lighthouse-service",isDocsHomePage:!1,title:"Lighthouse Service",description:"Developers",source:"@site/docs/microservices/lighthouse-service/lighthouse-service.md",slug:"/microservices/lighthouse-service",permalink:"/get-started/docs/microservices/lighthouse-service",editUrl:"https://github.com/1-platform/one-platform/edit/master/packages/documentation-spa/docs/microservices/lighthouse-service/lighthouse-service.md",version:"current",sidebar_label:"Lighthouse Service",sidebar:"someSidebar",previous:{title:"Home Service",permalink:"/get-started/docs/microservices/home-service"},next:{title:"Notifications Service",permalink:"/get-started/docs/microservices/notifications-service"}},c=[{value:"Developers",id:"developers",children:[]},{value:"Getting Started",id:"getting-started",children:[]},{value:"Usage",id:"usage",children:[{value:"Introduction",id:"introduction",children:[]},{value:"Supported Features",id:"supported-features",children:[]},{value:"Quick Start Guide",id:"quick-start-guide",children:[]},{value:"Start",id:"start",children:[]},{value:"Build",id:"build",children:[]},{value:"Testing",id:"testing",children:[]}]},{value:"API References",id:"api-references",children:[{value:"Audit Manager",id:"audit-manager",children:[]},{value:"Property Manager",id:"property-manager",children:[]}]}],o={rightToc:c};function b(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},o,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"developers"},"Developers"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Akhil Mohan - ",Object(i.b)("a",{parentName:"li",href:"mailto:akmohan@redhat.com"},"akmohan@redhat.com")," - ",Object(i.b)("a",{parentName:"li",href:"https://github.com/akhilmhdh"},"akhilmhdh (Akhil Mohan) \xb7 GitHub")),Object(i.b)("li",{parentName:"ol"},"Rigin Oommen - ",Object(i.b)("a",{parentName:"li",href:"mailto:roommen@redhat.com"},"roommen@redhat.com")," - ",Object(i.b)("a",{parentName:"li",href:"https://github.com/riginoommen"},"riginoommen (Rigin Oommen) \xb7 GitHub"))),Object(i.b)("h2",{id:"getting-started"},"Getting Started"),Object(i.b)("p",null,"Lighthouse microservice provides the ecosystem to perform the CI operations to test a website with ",Object(i.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/@lhci/ci"},"@lhci/ci")," also it consists of APIs which is integrated with ",Object(i.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/@lhci/server"},"@lhci/server")),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("h3",{id:"introduction"},"Introduction"),Object(i.b)("p",null,"Lighthouse microservice is built using NodeJS v14.16.0 which has mongodb integration as database support. This microservice serves as the backend for the Lighthouse SPA. This microservices consists of two parts"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Audit Manager",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Configurations associated with the CI environment."))),Object(i.b)("li",{parentName:"ol"},"Property Manager",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Configurations associated with lighthouse dashboard.")))),Object(i.b)("h3",{id:"supported-features"},"Supported Features"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Audit a website with Lighthouse and upload the results to server."),Object(i.b)("li",{parentName:"ol"},"APIs for the Lighthouse Server & Dashboard")),Object(i.b)("h3",{id:"quick-start-guide"},"Quick Start Guide"),Object(i.b)("h4",{id:"prerequisites"},"Prerequisites"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"NodeJS")," should be installed (_version >= ",Object(i.b)("strong",{parentName:"li"},"v14.16.0")," )"),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"NPM")," should be installed ",Object(i.b)("em",{parentName:"li"},"(version >= ",Object(i.b)("strong",{parentName:"em"},"6.14.11")," )")),Object(i.b)("li",{parentName:"ol"},"Version control system required. Preferably ",Object(i.b)("strong",{parentName:"li"},"git"),".")),Object(i.b)("h4",{id:"steps"},"Steps"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Clone the ",Object(i.b)("a",{parentName:"li",href:"https://github.com/1-Platform/one-platform"},"repository"),".")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"git clone git@github.com:1-Platform/one-platform.git\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Switch the working directory to the user microservice")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"cd one-platform/packages/lighthouse-service\n")),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},"Install the microservice dependencies.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"npm i\n")),Object(i.b)("h3",{id:"start"},"Start"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Run npm start:dev to run your microservice for dev env and npm start for production env."),Object(i.b)("li",{parentName:"ol"},"Navigate to port 8080 to see the microservice.")),Object(i.b)("p",null,"eg: http://localhost:8080/graphql"),Object(i.b)("h3",{id:"build"},"Build"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",{parentName:"li",href:"https://webpack.js.org/"},"Webpack")," is used for the build system in the microservices."),Object(i.b)("li",{parentName:"ol"},"Run npm build:dev to generate a build for dev env and npm build for production build.")),Object(i.b)("h3",{id:"testing"},"Testing"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"For testing microservice with ",Object(i.b)("a",{parentName:"li",href:"https://www.npmjs.com/package/supertest"},"supertest")," with the preconfigured settings."),Object(i.b)("li",{parentName:"ol"},"Test related environment configurations are present in .test.env under the e2e folder."),Object(i.b)("li",{parentName:"ol"},"Execute the command for testing.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"npm run test\n")),Object(i.b)("h2",{id:"api-references"},"API References"),Object(i.b)("p",null,"In the GraphQL GET Operations are defined as Queries and POST/PUT/PATCH operations are defined as Mutations."),Object(i.b)("h3",{id:"audit-manager"},"Audit Manager"),Object(i.b)("h4",{id:"queries"},"Queries"),Object(i.b)("h5",{id:"list-all-projects-registered-in-lighthouse-server"},"List all projects registered in lighthouse server,"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - ListLHProjects"),Object(i.b)("li",{parentName:"ul"},"Supported Query Variables - ",Object(i.b)("inlineCode",{parentName:"li"},"serverBaseUrl"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"query ListLHProjects($serverBaseUrl: String) {\n    listLHProjects(serverBaseUrl: $serverBaseUrl) {\n        _id\n        name\n        slug\n        externalUrl\n        token\n        baseBranch\n        createdAt\n        updatedAt\n    }\n}\n")),Object(i.b)("h5",{id:"fetch-lighthouse-report-from-server"},"Fetch lighthouse report from server."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - ListProjectLHReport"),Object(i.b)("li",{parentName:"ul"},"Supported Query Variables - ",Object(i.b)("inlineCode",{parentName:"li"},"serverBaseUrl"),",",Object(i.b)("inlineCode",{parentName:"li"},"projectID"),",",Object(i.b)("inlineCode",{parentName:"li"},"buildID"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"query ListProjectLHReport($serverBaseUrl: String, $projectID: String!, $buildID: String!) {\n    listProjectLHReport(serverBaseUrl: $serverBaseUrl, projectID: $projectID, buildID: $buildID) {\n        performance\n        accessibility\n        bestPractices\n        seo\n        pwa\n    }\n}\n")),Object(i.b)("h5",{id:"fetch--verify-build-token-of-a-project"},"Fetch & Verify Build Token of a project."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - VerifyLHProjectDetails"),Object(i.b)("li",{parentName:"ul"},"Supported Query Variables - ",Object(i.b)("inlineCode",{parentName:"li"},"serverBaseUrl"),",",Object(i.b)("inlineCode",{parentName:"li"},"buildToken"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"query VerifyLHProjectDetails($serverBaseUrl: String, $buildToken: String!) {\n    verifyLHProjectDetails(serverBaseUrl: $serverBaseUrl, buildToken: $buildToken) {\n        _id\n        name\n        slug\n        externalUrl\n        token\n        baseBranch\n        createdAt\n        updatedAt\n    }\n}\n")),Object(i.b)("h5",{id:"fetch-builds-of-the-project-by-branch-name-and-project-id"},"Fetch Builds of the project by branch name and project id."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - ListLHProjectBuilds"),Object(i.b)("li",{parentName:"ul"},"Supported Query Variables - ",Object(i.b)("inlineCode",{parentName:"li"},"serverBaseUrl"),",",Object(i.b)("inlineCode",{parentName:"li"},"projectID"),", ",Object(i.b)("inlineCode",{parentName:"li"},"branch"),", ",Object(i.b)("inlineCode",{parentName:"li"},"limit"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"query ListLHProjectBuilds($serverBaseUrl: String, $projectID: String!, $branch: String!, $limit: Int!) {\n    listLHProjectBuilds(serverBaseUrl: $serverBaseUrl, projectID: $projectID, branch: $branch, limit: $limit) {\n        id\n        projectId\n        branch\n        runAt\n        score {\n            performance\n            accessibility\n            bestPractices\n            seo\n            pwa\n        }\n        createdAt\n        updatedAt\n    }\n}\n")),Object(i.b)("h5",{id:"fetch-the-branches-of-a-project"},"Fetch the branches of a project."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - ListLHProjectBranches"),Object(i.b)("li",{parentName:"ul"},"Supported Query Variables - ",Object(i.b)("inlineCode",{parentName:"li"},"serverBaseUrl"),",",Object(i.b)("inlineCode",{parentName:"li"},"projectID"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"query ListLHProjectBranches($serverBaseUrl: String, $projectID: String!) {\n    listLHProjectBranches(serverBaseUrl: $serverBaseUrl, projectID: $projectID) {\n        branch\n}\n}\n")),Object(i.b)("h5",{id:"fetch-the-scores-of-the-tests-executed-with-lighthouse-microservice"},"Fetch the scores of the tests executed with lighthouse microservice."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - ListLHScore"),Object(i.b)("li",{parentName:"ul"},"Supported Query Variables - ",Object(i.b)("inlineCode",{parentName:"li"},"auditId"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"query ListLHScore($auditId: String!) {\n    listLHScore(auditId: $auditId) {\n        performance\n        accessibility\n        bestPractices\n        seo\n        pwa\n        }\n}\n")),Object(i.b)("h4",{id:"mutations"},"Mutations"),Object(i.b)("h5",{id:"audit-the-website"},"Audit the website"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - AuditWebsite"),Object(i.b)("li",{parentName:"ul"},"Required Mutation variables type - ",Object(i.b)("inlineCode",{parentName:"li"},"LighthouseInput"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"mutation AuditWebsite($property: LighthouseInput) {\n    auditWebsite(property: $property)\n}\n")),Object(i.b)("h5",{id:"upload-the-result-to-lighthouse-server"},"Upload the result to lighthouse server"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - UploadLHReport"),Object(i.b)("li",{parentName:"ul"},"Required Mutation variables type - ",Object(i.b)("inlineCode",{parentName:"li"},"LighthouseInput"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"mutation UploadLHReport($property: LighthouseInput) {\n    uploadLHReport(property: $property)\n}\n")),Object(i.b)("h3",{id:"property-manager"},"Property Manager"),Object(i.b)("h4",{id:"queries-1"},"Queries"),Object(i.b)("h5",{id:"list-all-properties-for-dashboard"},"List all properties for dashboard"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - ListLHProperties"),Object(i.b)("li",{parentName:"ul"},"Supported Query Variables - ",Object(i.b)("inlineCode",{parentName:"li"},"limit"),", ",Object(i.b)("inlineCode",{parentName:"li"},"offset"),", ",Object(i.b)("inlineCode",{parentName:"li"},"search"),",",Object(i.b)("inlineCode",{parentName:"li"},"user"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"query ListLHProperties($limit: Int, $offset: Int, $search: String, $user: String) {\n    listLHProperties(limit: $limit, offset: $offset, search: $search, user: $user) {\n        _id\n        name\n        description\n        projectId\n        apps {\n            id\n            name\n            branch\n        }\n        createdBy {\n            cn\n            uid\n            rhatUUID\n            mail\n        }\n        createdOn\n        updatedBy {\n            cn\n            uid\n            rhatUUID\n            mail\n        }\n        updatedOn\n    }\n}\n")),Object(i.b)("h5",{id:"list-property-by-id"},"List property by id"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - GetLHPropertyById"),Object(i.b)("li",{parentName:"ul"},"Supported Query Variables - ",Object(i.b)("inlineCode",{parentName:"li"},"id"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"query GetLHPropertyById($id: ID!) {\n    getLHPropertyById(id: $id) {\n        _id\n        name\n        description\n        projectId\n        apps {\n            id\n            name\n            branch\n        }\n        createdBy {\n            cn\n            uid\n            rhatUUID\n            mail\n        }\n        createdOn\n        updatedBy {\n            cn\n            uid\n            rhatUUID\n            mail\n        }\n        updatedOn\n    }\n}\n")),Object(i.b)("h4",{id:"mutations-1"},"Mutations"),Object(i.b)("h5",{id:"create-new-property-in-dashboard"},"Create new property in dashboard."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - CreateLHProperty"),Object(i.b)("li",{parentName:"ul"},"Required Mutation variables type - ",Object(i.b)("inlineCode",{parentName:"li"},"AddLHPropertyInput"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"mutation CreateLHProperty($property: AddLHPropertyInput!) {\n    createLHProperty(property: $property) {\n        _id\n        name\n        description\n        projectId\n        apps {\n            id\n            name\n            branch\n        }\n        createdBy {\n            cn\n            uid\n            rhatUUID\n            mail\n        }\n        createdOn\n        updatedBy {\n            cn\n            uid\n            rhatUUID\n            mail\n        }\n        updatedOn\n    }\n}\n")),Object(i.b)("h5",{id:"update-property-in-dashboard"},"Update property in dashboard."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - UpdateLHProperty"),Object(i.b)("li",{parentName:"ul"},"Required Mutation variables type - ",Object(i.b)("inlineCode",{parentName:"li"},"UpdateLHPropertyInput"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"mutation UpdateLHProperty(id:ID! ,$data: UpdateLHPropertyInput) {\n    updateLHProperty(id:$id, data: $data) {\n        _id\n        name\n        description\n        projectId\n        apps {\n            id\n            name\n            branch\n        }\n        createdBy {\n            cn\n            uid\n            rhatUUID\n            mail\n        }\n        createdOn\n        updatedBy {\n            cn\n            uid\n            rhatUUID\n            mail\n        }\n        updatedOn\n    }\n}\n")),Object(i.b)("h5",{id:"delete-property-in-dashboard"},"Delete property in dashboard."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - DeleteProperty"),Object(i.b)("li",{parentName:"ul"},"Required Mutation variables type - ",Object(i.b)("inlineCode",{parentName:"li"},"id"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"mutation DeleteLHProperty(id:ID!) {\n    deleteLHProperty(id:$id) {\n        _id\n        name\n    }\n}\n")),Object(i.b)("h5",{id:"create-new-mapping-of-app-in-property"},"Create new mapping of app in property."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - CreateLHApp"),Object(i.b)("li",{parentName:"ul"},"Required Mutation variables type - ",Object(i.b)("inlineCode",{parentName:"li"},"propertyId"),",",Object(i.b)("inlineCode",{parentName:"li"},"AddLHPropertyAppInput"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"mutation CreateLHApp($propertyId: ID!, appData: AddLHPropertyAppInput!) {\n    createLHApp(propertyId: $propertyId, appData: $appData) {\n        _id\n        name\n        description\n        projectId\n        apps {\n            id\n            name\n            branch\n        }\n        createdBy {\n            cn\n            uid\n            rhatUUID\n            mail\n        }\n        createdOn\n        updatedBy {\n            cn\n            uid\n            rhatUUID\n            mail\n        }\n        updatedOn\n    }\n}\n")),Object(i.b)("h5",{id:"update-mapping-of-app-in-property"},"Update mapping of app in property."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - UpdateLHApp"),Object(i.b)("li",{parentName:"ul"},"Required Mutation variables type - ",Object(i.b)("inlineCode",{parentName:"li"},"appId"),",",Object(i.b)("inlineCode",{parentName:"li"},"LHPropertyAppInput"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"mutation UpdateLHApp($appId: ID!, appData: LHPropertyAppInput!) {\n    updateLHApp(propertyId: $propertyId, appData: $appData) {\n        _id\n        name\n        description\n        projectId\n        apps {\n            id\n            name\n            branch\n        }\n        createdBy {\n            cn\n            uid\n            rhatUUID\n            mail\n        }\n        createdOn\n        updatedBy {\n            cn\n            uid\n            rhatUUID\n            mail\n        }\n        updatedOn\n    }\n}\n")),Object(i.b)("h5",{id:"delete-mapping-of-app-from-property"},"Delete mapping of app from property."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - DeleteLHApp"),Object(i.b)("li",{parentName:"ul"},"Required Mutation variables type - ",Object(i.b)("inlineCode",{parentName:"li"},"appId"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"mutation DeleteLHApp($appId: ID!) {\n    deleteLHApp(appId: $appId) {\n        _id\n        apps {\n            id\n            name\n            branch\n        }\n    }\n}\n")))}b.isMDXComponent=!0}}]);