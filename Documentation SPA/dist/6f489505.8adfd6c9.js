(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{153:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),s=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},b=function(e){var t=s(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),b=s(a),d=n,m=b["".concat(c,".").concat(d)]||b[d]||u[d]||i;return a?r.a.createElement(m,l(l({ref:t},o),{},{components:a})):r.a.createElement(m,l({ref:t},o))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,c=new Array(i);c[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,c[1]=l;for(var o=2;o<i;o++)c[o]=a[o];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},97:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return p})),a.d(t,"default",(function(){return s}));var n=a(2),r=a(6),i=(a(0),a(153)),c={id:"search-service",title:"Search Service",sidebar_label:"Search Service",slug:"/microservices/search-service"},l={unversionedId:"microservices/search/search-service",id:"microservices/search/search-service",isDocsHomePage:!1,title:"Search Service",description:"Developers",source:"@site/docs/microservices/search/search-service.md",slug:"/microservices/search-service",permalink:"/get-started/docs/microservices/search-service",editUrl:"https://github.com/1-platform/one-platform/edit/master/packages/documentation-spa/docs/microservices/search/search-service.md",version:"current",sidebar_label:"Search Service",sidebar:"someSidebar",previous:{title:"User/Group Service",permalink:"/get-started/docs/microservices/user-groups-service"},next:{title:"Component Library",permalink:"/get-started/docs/component-library"}},p=[{value:"Developers",id:"developers",children:[]},{value:"Getting Started",id:"getting-started",children:[]},{value:"Usage",id:"usage",children:[{value:"Introduction",id:"introduction",children:[]},{value:"Supported Features",id:"supported-features",children:[]},{value:"Quick Start Guide",id:"quick-start-guide",children:[]},{value:"Start",id:"start",children:[]},{value:"Build",id:"build",children:[]},{value:"Testing",id:"testing",children:[]}]},{value:"API References",id:"api-references",children:[{value:"Queries",id:"queries",children:[]},{value:"Mutations",id:"mutations",children:[]}]},{value:"Code Snippets",id:"code-snippets",children:[]}],o={rightToc:p};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"developers"},"Developers"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Rigin Oommen - ",Object(i.b)("a",{parentName:"li",href:"mailto:roommen@redhat.com"},"roommen@redhat.com")," - ",Object(i.b)("a",{parentName:"li",href:"https://github.com/riginoommen"},"riginoommen (Rigin Oommen) \xb7 GitHub")),Object(i.b)("li",{parentName:"ol"},"Ghanshyam Lohar - ",Object(i.b)("a",{parentName:"li",href:"mailto:glohar@redhat.com"},"glohar@redhat.com")," - ",Object(i.b)("a",{parentName:"li",href:"https://github.com/ghanlohar"},"ghanlohar (Ghanshyam Lohar) \xb7 GitHub"))),Object(i.b)("h2",{id:"getting-started"},"Getting Started"),Object(i.b)("p",null,"Search Microservice is a pillar which talks to Hydra APIs integrated with solr instances. This microservice is used to manage the search index"),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("h3",{id:"introduction"},"Introduction"),Object(i.b)("p",null,"Search microservice is built using NodeJS which has hydra API support. This microservice serves as the index store for the one platform. Most of the SPAs and microservices uses this data to implement search functionality."),Object(i.b)("h3",{id:"supported-features"},"Supported Features"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Create, Update & Delete Search Index"),Object(i.b)("li",{parentName:"ol"},"Read Search Index"),Object(i.b)("li",{parentName:"ol"},"Create, Update & Delete Search Map"),Object(i.b)("li",{parentName:"ol"},"List the Search Map"),Object(i.b)("li",{parentName:"ol"},"List Search Map by ",Object(i.b)("inlineCode",{parentName:"li"},"_id"))),Object(i.b)("h4",{id:"apps-using-this-microservice"},"Apps using this microservice"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"All Native & Non-Native SPAs")),Object(i.b)("h3",{id:"quick-start-guide"},"Quick Start Guide"),Object(i.b)("h4",{id:"prerequisites"},"Prerequisites"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"NodeJS")," should be installed (",Object(i.b)("em",{parentName:"li"},"version\\",">","=__v10.15.3"),")"),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"NPM")," should be installed ",Object(i.b)("em",{parentName:"li"},"(version\\",">","= ",Object(i.b)("strong",{parentName:"em"},"6.4.1")," )")),Object(i.b)("li",{parentName:"ol"},"Version control system required. Preferably ",Object(i.b)("strong",{parentName:"li"},"git"),".")),Object(i.b)("h4",{id:"steps"},"Steps"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Clone the ",Object(i.b)("a",{parentName:"li",href:"https://github.com/1-Platform/one-platform"},"repository"),".")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"git clone git@github.com:1-Platform/one-platform.git\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Switch the working directory to the user microservice")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"cd one-platform/packages/search-service\n")),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},"Install the microservice dependencies.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"npm i\n")),Object(i.b)("h3",{id:"start"},"Start"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Run npm start:dev to run your microservice for dev env and npm start for production env."),Object(i.b)("li",{parentName:"ol"},"Navigate to port 8080 to see the microservice.")),Object(i.b)("p",null,"eg: http://localhost:8080/graphql"),Object(i.b)("h3",{id:"build"},"Build"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",{parentName:"li",href:"https://webpack.js.org/"},"Webpack")," is used for the build system in the microservices."),Object(i.b)("li",{parentName:"ol"},"Run npm build:dev to generate a build for dev env and npm build for production build.")),Object(i.b)("h3",{id:"testing"},"Testing"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"For testing microservice with ",Object(i.b)("a",{parentName:"li",href:"https://www.npmjs.com/package/supertest"},"supertest")," with the preconfigured settings."),Object(i.b)("li",{parentName:"ol"},"Test related environment configurations are present in .test.env under the e2e folder."),Object(i.b)("li",{parentName:"ol"},"Execute the command for testing.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sh"},"npm run test\n")),Object(i.b)("h2",{id:"api-references"},"API References"),Object(i.b)("p",null,"In the GraphQL GET Operations are defined as Queries and POST/PUT/PATCH operations are defined as Mutations."),Object(i.b)("h3",{id:"queries"},"Queries"),Object(i.b)("h4",{id:"search-query"},"Search Query"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - Search"),Object(i.b)("li",{parentName:"ul"},"Supported Query Variables - ",Object(i.b)("inlineCode",{parentName:"li"},"query"),", ",Object(i.b)("inlineCode",{parentName:"li"},"start"),", ",Object(i.b)("inlineCode",{parentName:"li"},"rows"))),Object(i.b)("p",null,"Example Query"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"query Search($query: String, $start: Int, $rows: Int) {\n    search(query: $query, $start: 10: $rows: 10) {\n        responseHeader{\n            status\n            }\n    response {\n        numFound\n        docs {\n            id\n            title\n            abstract\n            description\n            icon\n            uri\n            tags\n            timestamp\n        }\n    }\n}\n")),Object(i.b)("h4",{id:"list-search-maps-query"},"List Search Maps Query"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - ListSearchMap")),Object(i.b)("p",null,"Example Query"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"query ListSearchMap {\n    listSearchMap {\n        _id\n        appId\n        apiConfig\n        fields\n        preferences\n        createdBy\n        createdOn\n        updatedBy\n        updatedOn\n    }\n}\n")),Object(i.b)("h4",{id:"list-search-map-by-_id"},"List Search Map by ",Object(i.b)("inlineCode",{parentName:"h4"},"_id")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - GetSearchMap"),Object(i.b)("li",{parentName:"ul"},"Supported Query Variables - ",Object(i.b)("inlineCode",{parentName:"li"},"_id"))),Object(i.b)("p",null,"Example Query"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"query GetSearchMap($_id: String!) {\n    getSearchMap(_id: $_id) {\n        _id\n        appId\n        apiConfig\n        fields\n        preferences\n        createdBy\n        createdOn\n        updatedBy\n        updatedOn\n    }\n}\n")),Object(i.b)("h3",{id:"mutations"},"Mutations"),Object(i.b)("h4",{id:"createupdatedelete-data-in-index"},"Create/Update/Delete data in index"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - ManageIndex"),Object(i.b)("li",{parentName:"ul"},"Required Mutation variables type - ",Object(i.b)("inlineCode",{parentName:"li"},"SearchInput"),", ",Object(i.b)("inlineCode",{parentName:"li"},"mode"))),Object(i.b)("p",null,"Example Mutation"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"mutation ManageIndex($input: SearchInput, $mode: String!) {\n    manageIndex(input: $input, mode: $mode) {\n        status\n    }\n}\n")),Object(i.b)("h4",{id:"createupdate-data-in-index"},"Create/Update data in index"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - CreateUpdateIndex"),Object(i.b)("li",{parentName:"ul"},"Required Mutation variables type - ",Object(i.b)("inlineCode",{parentName:"li"},"SearchInput"))),Object(i.b)("p",null,"Example Mutation"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"mutation CreateUpdateIndex($input: SearchInput) {\n    CreateUpdateIndex(input: $input) {\n        status\n    }\n}\n")),Object(i.b)("h4",{id:"delete-data-from-index"},"Delete data from index"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - DeleteIndex"),Object(i.b)("li",{parentName:"ul"},"Required Mutation Variable - ",Object(i.b)("inlineCode",{parentName:"li"},"id"))),Object(i.b)("p",null,"Example Mutation"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"mutation DeleteIndex($id: String!) {\n    deleteIndex(id:$id) {\n        status\n    }\n}\n")),Object(i.b)("h4",{id:"create-search-map"},"Create Search Map"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - CreateSearchMap"),Object(i.b)("li",{parentName:"ul"},"Required Mutation variables type - ",Object(i.b)("inlineCode",{parentName:"li"},"SearchMapInput"))),Object(i.b)("p",null,"Example Mutation"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"mutation CreateSearchMap($input: SearchMapInput) {\n    createSearchMap(input: $input) {\n        _id\n        appId\n        apiConfig\n        fields\n        preferences\n        createdBy\n        createdOn\n        updatedBy\n        updatedOn\n    }\n}\n")),Object(i.b)("h4",{id:"update-search-map"},"Update Search Map"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - UpdateSearchMap"),Object(i.b)("li",{parentName:"ul"},"Required Mutation variables type - ",Object(i.b)("inlineCode",{parentName:"li"},"SearchMapInput"))),Object(i.b)("p",null,"Example Mutation"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"mutation UpdateSearchMap($input: SearchMapInput) {\n    updateSearchMap(input: $input) {\n        _id\n        appId\n        apiConfig\n        fields\n        preferences\n        createdBy\n        createdOn\n        updatedBy\n        updatedOn\n    }\n}\n")),Object(i.b)("h4",{id:"delete-search-map"},"Delete Search Map"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Operation Name - DeleteSearchMap"),Object(i.b)("li",{parentName:"ul"},"Required Mutation Variable - ",Object(i.b)("inlineCode",{parentName:"li"},"id"))),Object(i.b)("p",null,"Example Mutation"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-graphql"},"mutation DeleteSearchMap($id: String!) {\n    deleteSearchMap(_id: $id) {\n        status\n    }\n}\n")),Object(i.b)("h2",{id:"code-snippets"},"Code Snippets"),Object(i.b)("h4",{id:"universal-helper-code-for-indexing-the-data-with-search-microservice"},"Universal Helper code for indexing the data with search microservice."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Language - Javascript")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"manageSearchIndex(data: any, mode: string) {\n    let query: string = `\n    mutation ManageIndex($input: SearchInput, $mode: String!) {\n        manageIndex(input: $input, mode: $mode) {\n            status\n        }\n    }`;\n    let headers = new Headers();\n    // Authorization Token for API gateway\n    headers.append(`Authorization`, `${ process.env.GATEWAY_AUTH_TOKEN }`);\n    headers.append(`Content-Type`, `application/json`);\n    // API Gateway URL.\n    return fetch(`${ process.env.API_GATEWAY }`, {\n            method: `POST`,\n            headers,\n            body: JSON.stringify({\n                query: query,\n                variables: {\n                    input: mode === 'index' ? data?.input : data,\n                    mode\n                }\n            }),\n        }).then((response: any) => {\n            return response.json();\n        })\n        .then((result: any) => {\n            const successStatusCodes = [200, 204];\n            if (successStatusCodes.includes(result.data?.manageIndex?.status)) {\n                console.info('Sucessfully completed the index updation')\n            } else if (!successStatusCodes.includes(result.data?.manageIndex?.status)) {\n                console.info('Error in index updation.');\n            }\n        })\n        .catch((err: Error) => {\n            throw err;\n        });\n}\n")))}s.isMDXComponent=!0}}]);